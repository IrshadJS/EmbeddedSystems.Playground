C51 COMPILER V9.03   LED_SEGDRIVER_1_COM_PWM_PM                                            03/29/2012 15:33:59 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE LED_SEGDRIVER_1_COM_PWM_PM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\LED_SegDriver_1_COM_PWM_PM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\LED_SegDriver_1_COM_PWM_PM.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\LED
                    -_SegDriver_1_COM_PWM_PM.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\LED_
                    -SegDriver_1_COM_PWM_PM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LED_SegDriver_1_COM_PWM_PM.c
   3          * Version 2.10
   4          *
   5          * Description:
   6          *  This file provides the power management source code to API for the
   7          *  PWM.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          #include "cytypes.h"
  18          #include "LED_SegDriver_1_COM_PWM.h"
  19          
  20          static LED_SegDriver_1_COM_PWM_backupStruct LED_SegDriver_1_COM_PWM_backup;
  21          
  22          
  23          /*******************************************************************************
  24          * Function Name: LED_SegDriver_1_COM_PWM_SaveConfig
  25          ********************************************************************************
  26          *
  27          * Summary:
  28          *  Saves the current user configuration of the component.
  29          *  
  30          * Parameters:  
  31          *  void
  32          *
  33          * Return: 
  34          *  void
  35          *
  36          * Global variables:
  37          *  LED_SegDriver_1_COM_PWM_backup:  Variables of this global structure are modified to 
  38          *  store the values of non retention configuration registers when Sleep() API is 
  39          *  called.
  40          *
  41          * Reentrant:
  42          *  No.
  43          *
  44          *******************************************************************************/
  45          void LED_SegDriver_1_COM_PWM_SaveConfig(void)
  46          {
  47   1          
  48   1          #if(!LED_SegDriver_1_COM_PWM_UsingFixedFunction)
  49   1              #if (LED_SegDriver_1_COM_PWM_PSOC3_ES2 || LED_SegDriver_1_COM_PWM_PSOC5_ES1)
                          LED_SegDriver_1_COM_PWM_backup.PWMUdb = LED_SegDriver_1_COM_PWM_ReadCounter();
                          LED_SegDriver_1_COM_PWM_backup.PWMPeriod = LED_SegDriver_1_COM_PWM_ReadPeriod();
                          #if (LED_SegDriver_1_COM_PWM_UseStatus)
C51 COMPILER V9.03   LED_SEGDRIVER_1_COM_PWM_PM                                            03/29/2012 15:33:59 PAGE 2   

                              LED_SegDriver_1_COM_PWM_backup.InterruptMaskValue = LED_SegDriver_1_COM_PWM_STATUS_MASK;
                          #endif
                          
                          #if(LED_SegDriver_1_COM_PWM_UseOneCompareMode)
                              LED_SegDriver_1_COM_PWM_backup.PWMCompareValue = LED_SegDriver_1_COM_PWM_ReadCompare();
                          #else
                              LED_SegDriver_1_COM_PWM_backup.PWMCompareValue1 = LED_SegDriver_1_COM_PWM_ReadCompare1();
                              LED_SegDriver_1_COM_PWM_backup.PWMCompareValue2 = LED_SegDriver_1_COM_PWM_ReadCompare2();
                          #endif
                          
                         #if(LED_SegDriver_1_COM_PWM_DeadBandUsed)
                              LED_SegDriver_1_COM_PWM_backup.PWMdeadBandValue = LED_SegDriver_1_COM_PWM_ReadDeadTime();
                          #endif
                        
                          #if ( LED_SegDriver_1_COM_PWM_KillModeMinTime)
                              LED_SegDriver_1_COM_PWM_backup.PWMKillCounterPeriod = LED_SegDriver_1_COM_PWM_ReadKillTime
             -();
                          #endif
                      #endif
  71   1              
  72   1              #if (LED_SegDriver_1_COM_PWM_PSOC3_ES3 || LED_SegDriver_1_COM_PWM_PSOC5_ES2)
  73   1                  #if(!LED_SegDriver_1_COM_PWM_PWMModeIsCenterAligned)
  74   1                      LED_SegDriver_1_COM_PWM_backup.PWMPeriod = LED_SegDriver_1_COM_PWM_ReadPeriod();
  75   1                  #endif
  76   1                  LED_SegDriver_1_COM_PWM_backup.PWMUdb = LED_SegDriver_1_COM_PWM_ReadCounter();
  77   1                  #if (LED_SegDriver_1_COM_PWM_UseStatus)
  78   1                      LED_SegDriver_1_COM_PWM_backup.InterruptMaskValue = LED_SegDriver_1_COM_PWM_STATUS_MASK;
  79   1                  #endif
  80   1                  
  81   1                  #if(LED_SegDriver_1_COM_PWM_DeadBandMode == LED_SegDriver_1_COM_PWM__B_PWM__DBM_256_CLOCKS || 
             -LED_SegDriver_1_COM_PWM_DeadBandMode == LED_SegDriver_1_COM_PWM__B_PWM__DBM_2_4_CLOCKS)
                              LED_SegDriver_1_COM_PWM_backup.PWMdeadBandValue = LED_SegDriver_1_COM_PWM_ReadDeadTime();
                          #endif
  84   1                  
  85   1                  #if(LED_SegDriver_1_COM_PWM_KillModeMinTime)
                               LED_SegDriver_1_COM_PWM_backup.PWMKillCounterPeriod = LED_SegDriver_1_COM_PWM_ReadKillTim
             -e();
                          #endif
  88   1              #endif
  89   1              
  90   1              #if(LED_SegDriver_1_COM_PWM_UseControl)
  91   1                  LED_SegDriver_1_COM_PWM_backup.PWMControlRegister = LED_SegDriver_1_COM_PWM_ReadControlRegiste
             -r();
  92   1              #endif
  93   1          #endif  
  94   1      }
  95          
  96          
  97          /*******************************************************************************
  98          * Function Name: LED_SegDriver_1_COM_PWM_RestoreConfig
  99          ********************************************************************************
 100          * 
 101          * Summary:
 102          *  Restores the current user configuration of the component.
 103          *
 104          * Parameters:  
 105          *  void
 106          *
 107          * Return: 
 108          *  void
 109          *
 110          * Global variables:
C51 COMPILER V9.03   LED_SEGDRIVER_1_COM_PWM_PM                                            03/29/2012 15:33:59 PAGE 3   

 111          *  LED_SegDriver_1_COM_PWM_backup:  Variables of this global structure are used to restore 
 112          *  the values of non retention registers on wakeup from sleep mode.
 113          *
 114          * Reentrant:
 115          *  Yes.
 116          *
 117          *******************************************************************************/
 118          void LED_SegDriver_1_COM_PWM_RestoreConfig(void) 
 119          {
 120   1              #if(!LED_SegDriver_1_COM_PWM_UsingFixedFunction)
 121   1                  #if (LED_SegDriver_1_COM_PWM_PSOC3_ES2 || LED_SegDriver_1_COM_PWM_PSOC5_ES1)
                              /* Interrupt State Backup for Critical Region*/
                              uint8 LED_SegDriver_1_COM_PWM_interruptState;
                              /* Enter Critical Region*/
                              LED_SegDriver_1_COM_PWM_interruptState = CyEnterCriticalSection();
                              #if (LED_SegDriver_1_COM_PWM_UseStatus)
                                  /* Use the interrupt output of the status register for IRQ output */
                                  LED_SegDriver_1_COM_PWM_STATUS_AUX_CTRL |= LED_SegDriver_1_COM_PWM_STATUS_ACTL_INT_EN_
             -MASK;
                                  
                                  LED_SegDriver_1_COM_PWM_STATUS_MASK = LED_SegDriver_1_COM_PWM_backup.InterruptMaskValu
             -e;
                              #endif
                              
                              #if (LED_SegDriver_1_COM_PWM_Resolution == 8)
                                  /* Set FIFO 0 to 1 byte register for period*/
                                  LED_SegDriver_1_COM_PWM_AUX_CONTROLDP0 |= (LED_SegDriver_1_COM_PWM_AUX_CTRL_FIFO0_CLR)
             -;
                              #else /* (LED_SegDriver_1_COM_PWM_Resolution == 16)*/
                                  /* Set FIFO 0 to 1 byte register for period */
                                  LED_SegDriver_1_COM_PWM_AUX_CONTROLDP0 |= (LED_SegDriver_1_COM_PWM_AUX_CTRL_FIFO0_CLR)
             -;
                                  LED_SegDriver_1_COM_PWM_AUX_CONTROLDP1 |= (LED_SegDriver_1_COM_PWM_AUX_CTRL_FIFO0_CLR)
             -;
                              #endif
                              /* Exit Critical Region*/
                              CyExitCriticalSection(LED_SegDriver_1_COM_PWM_interruptState);
                              
                              LED_SegDriver_1_COM_PWM_WriteCounter(LED_SegDriver_1_COM_PWM_backup.PWMUdb);
                              LED_SegDriver_1_COM_PWM_WritePeriod(LED_SegDriver_1_COM_PWM_backup.PWMPeriod);
                              
                              #if(LED_SegDriver_1_COM_PWM_UseOneCompareMode)
                                  LED_SegDriver_1_COM_PWM_WriteCompare(LED_SegDriver_1_COM_PWM_backup.PWMCompareValue);
                              #else
                                  LED_SegDriver_1_COM_PWM_WriteCompare1(LED_SegDriver_1_COM_PWM_backup.PWMCompareValue1)
             -;
                                  LED_SegDriver_1_COM_PWM_WriteCompare2(LED_SegDriver_1_COM_PWM_backup.PWMCompareValue2)
             -;
                              #endif
                              
                             #if(LED_SegDriver_1_COM_PWM_DeadBandMode == LED_SegDriver_1_COM_PWM__B_PWM__DBM_256_CLOCKS 
             -|| LED_SegDriver_1_COM_PWM_DeadBandMode == LED_SegDriver_1_COM_PWM__B_PWM__DBM_2_4_CLOCKS)
                                  LED_SegDriver_1_COM_PWM_WriteDeadTime(LED_SegDriver_1_COM_PWM_backup.PWMdeadBandValue)
             -;
                              #endif
                          
                              #if ( LED_SegDriver_1_COM_PWM_KillModeMinTime)
                                  LED_SegDriver_1_COM_PWM_WriteKillTime(LED_SegDriver_1_COM_PWM_backup.PWMKillCounterPer
             -iod);
                              #endif
                          #endif
 162   1                  
C51 COMPILER V9.03   LED_SEGDRIVER_1_COM_PWM_PM                                            03/29/2012 15:33:59 PAGE 4   

 163   1                  #if (LED_SegDriver_1_COM_PWM_PSOC3_ES3 || LED_SegDriver_1_COM_PWM_PSOC5_ES2)
 164   1                      #if(!LED_SegDriver_1_COM_PWM_PWMModeIsCenterAligned)
 165   1                          LED_SegDriver_1_COM_PWM_WritePeriod(LED_SegDriver_1_COM_PWM_backup.PWMPeriod);
 166   1                      #endif
 167   1                      LED_SegDriver_1_COM_PWM_WriteCounter(LED_SegDriver_1_COM_PWM_backup.PWMUdb);
 168   1                      #if (LED_SegDriver_1_COM_PWM_UseStatus)
 169   1                          LED_SegDriver_1_COM_PWM_STATUS_MASK = LED_SegDriver_1_COM_PWM_backup.InterruptMaskValu
             -e;
 170   1                      #endif
 171   1                      
 172   1                      #if(LED_SegDriver_1_COM_PWM_DeadBandMode == LED_SegDriver_1_COM_PWM__B_PWM__DBM_256_CLOCKS
             - || LED_SegDriver_1_COM_PWM_DeadBandMode == LED_SegDriver_1_COM_PWM__B_PWM__DBM_2_4_CLOCKS)
                                  LED_SegDriver_1_COM_PWM_WriteDeadTime(LED_SegDriver_1_COM_PWM_backup.PWMdeadBandValue)
             -;
                              #endif
 175   1                      
 176   1                      #if(LED_SegDriver_1_COM_PWM_KillModeMinTime)
                                  LED_SegDriver_1_COM_PWM_WriteKillTime(LED_SegDriver_1_COM_PWM_backup.PWMKillCounterPer
             -iod);
                              #endif
 179   1                  #endif
 180   1                  
 181   1                  #if(LED_SegDriver_1_COM_PWM_UseControl)
 182   1                      LED_SegDriver_1_COM_PWM_WriteControlRegister(LED_SegDriver_1_COM_PWM_backup.PWMControlRegi
             -ster); 
 183   1                  #endif
 184   1              #endif  
 185   1          }
 186          
 187          
 188          /*******************************************************************************
 189          * Function Name: LED_SegDriver_1_COM_PWM_Sleep
 190          ********************************************************************************
 191          * 
 192          * Summary:
 193          *  Disables block's operation and saves the user configuration. Should be called 
 194          *  just prior to entering sleep.
 195          *  
 196          * Parameters:  
 197          *  void
 198          *
 199          * Return: 
 200          *  void
 201          *
 202          * Global variables:
 203          *  LED_SegDriver_1_COM_PWM_backup.PWMEnableState:  Is modified depending on the enable state
 204          *  of the block before entering sleep mode.
 205          *
 206          * Reentrant:
 207          *  No.
 208          *
 209          *******************************************************************************/
 210          void LED_SegDriver_1_COM_PWM_Sleep(void)
 211          {
 212   1          #if(LED_SegDriver_1_COM_PWM_UseControl)
 213   1              if(LED_SegDriver_1_COM_PWM_CTRL_ENABLE == (LED_SegDriver_1_COM_PWM_CONTROL & LED_SegDriver_1_COM_P
             -WM_CTRL_ENABLE))
 214   1              {
 215   2                  /*Component is enabled */
 216   2                  LED_SegDriver_1_COM_PWM_backup.PWMEnableState = 1u;
 217   2              }
 218   1              else
C51 COMPILER V9.03   LED_SEGDRIVER_1_COM_PWM_PM                                            03/29/2012 15:33:59 PAGE 5   

 219   1              {
 220   2                  /* Component is disabled */
 221   2                  LED_SegDriver_1_COM_PWM_backup.PWMEnableState = 0u;
 222   2              }
 223   1          #endif
 224   1          /* Stop component */
 225   1          LED_SegDriver_1_COM_PWM_Stop();
 226   1          
 227   1          /* Save registers configuration */
 228   1          LED_SegDriver_1_COM_PWM_SaveConfig();
 229   1      }
 230          
 231          
 232          /*******************************************************************************
 233          * Function Name: LED_SegDriver_1_COM_PWM_Wakeup
 234          ********************************************************************************
 235          * 
 236          * Summary:
 237          *  Restores and enables the user configuration. Should be called just after 
 238          *  awaking from sleep.
 239          *  
 240          * Parameters:  
 241          *  void
 242          *
 243          * Return: 
 244          *  void
 245          *
 246          * Global variables:
 247          *  LED_SegDriver_1_COM_PWM_backup.pwmEnable:  Is used to restore the enable state of 
 248          *  block on wakeup from sleep mode.
 249          *
 250          * Reentrant:
 251          *  Yes
 252          *
 253          *******************************************************************************/
 254          void LED_SegDriver_1_COM_PWM_Wakeup(void) 
 255          {
 256   1           /* Restore registers values */
 257   1          LED_SegDriver_1_COM_PWM_RestoreConfig();
 258   1          
 259   1          if(LED_SegDriver_1_COM_PWM_backup.PWMEnableState != 0u)
 260   1          {
 261   2              /* Enable component's operation */
 262   2              LED_SegDriver_1_COM_PWM_Enable();
 263   2          } /* Do nothing if component's block was disabled before */
 264   1          
 265   1      }
 266          
 267          /* [] END OF FILE */
C51 COMPILER V9.03   LED_SEGDRIVER_1_COM_PWM_PM                                            03/29/2012 15:33:59 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION LED_SegDriver_1_COM_PWM_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 74
0000 906445            MOV     DPTR,#06445H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup+02H
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
000A 120000      E     LCALL   LED_SegDriver_1_COM_PWM_ReadCounter
000D 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup+01H
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
0012 906485            MOV     DPTR,#06485H
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup+03H
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
001C 906475            MOV     DPTR,#06475H
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup+04H
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
0026 22                RET     
             ; FUNCTION LED_SegDriver_1_COM_PWM_SaveConfig (END)

             ; FUNCTION LED_SegDriver_1_COM_PWM_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 165
0000 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup+02H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 120000      E     LCALL   _LED_SegDriver_1_COM_PWM_WritePeriod
                                           ; SOURCE LINE # 167
0008 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup+01H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 120000      E     LCALL   _LED_SegDriver_1_COM_PWM_WriteCounter
                                           ; SOURCE LINE # 169
0010 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup+03H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 906485            MOV     DPTR,#06485H
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
001A 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup+04H
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 906475            MOV     DPTR,#06475H
0022 EF                MOV     A,R7
C51 COMPILER V9.03   LED_SEGDRIVER_1_COM_PWM_PM                                            03/29/2012 15:33:59 PAGE 7   

0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
0024 22                RET     
             ; FUNCTION LED_SegDriver_1_COM_PWM_RestoreConfig (END)

             ; FUNCTION LED_SegDriver_1_COM_PWM_Sleep (BEGIN)
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 213
0000 906475            MOV     DPTR,#06475H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5480              ANL     A,#080H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 6480              XRL     A,#080H
000E 4E                ORL     A,R6
000F 7008              JNZ     ?C0003
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 216
0011 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0017 8005              SJMP    ?C0004
0019         ?C0003:
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 221
0019 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
001E         ?C0004:
                                           ; SOURCE LINE # 225
001E 120000      E     LCALL   LED_SegDriver_1_COM_PWM_Stop
                                           ; SOURCE LINE # 228
0021 120000      R     LCALL   LED_SegDriver_1_COM_PWM_SaveConfig
                                           ; SOURCE LINE # 229
0024 22                RET     
             ; FUNCTION LED_SegDriver_1_COM_PWM_Sleep (END)

             ; FUNCTION LED_SegDriver_1_COM_PWM_Wakeup (BEGIN)
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 257
0000 120000      R     LCALL   LED_SegDriver_1_COM_PWM_RestoreConfig
                                           ; SOURCE LINE # 259
0003 900000      R     MOV     DPTR,#LED_SegDriver_1_COM_PWM_backup
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 6003              JZ      ?C0007
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 262
000B 120000      E     LCALL   LED_SegDriver_1_COM_PWM_Enable
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 265
000E         ?C0007:
000E 22                RET     
             ; FUNCTION LED_SegDriver_1_COM_PWM_Wakeup (END)
C51 COMPILER V9.03   LED_SEGDRIVER_1_COM_PWM_PM                                            03/29/2012 15:33:59 PAGE 8   




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    128    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
