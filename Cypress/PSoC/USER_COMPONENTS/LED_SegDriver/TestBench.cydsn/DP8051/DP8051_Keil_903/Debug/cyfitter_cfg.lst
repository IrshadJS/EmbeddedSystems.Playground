C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\2.1\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.lst)
                    - CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.1 Nightly Build 1085
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2012, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <CyDmac.h>
  23          #include <cyfitter_cfg.h>
  24          
  25          /* Clock startup error codes                                                   */
  26          #define CYCLOCKSTART_NO_ERROR    0
  27          #define CYCLOCKSTART_XTAL_ERROR  1
  28          #define CYCLOCKSTART_32KHZ_ERROR 2
  29          #define CYCLOCKSTART_PLL_ERROR   3
  30          
  31          /*******************************************************************************
  32          * Function Name: CyClockStartupError
  33          ********************************************************************************
  34          * Summary:
  35          *  If an error is encountered during clock configuration (crystal startup error,
  36          *  PLL lock error, etc) the system will end up here.  Unless reimplemented by 
  37          *  the customer, an infinite loop will be encountered.
  38          *
  39          * Parameters:  
  40          *   void
  41          *
  42          * Return:
  43          *   void
  44          *
  45          *******************************************************************************/
  46          #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
  49          static void CyClockStartupError(uint8 errorCode)
  50          {
  51   1          /* To remove the compiler warning if errorCode not used.                */
  52   1          errorCode = errorCode;
  53   1      
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 2   

  54   1          /* `#START CyClockStartupError` */
  55   1      
  56   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc)    */
  57   1          /* we will end up here to allow the customer to implement something to  */
  58   1          /* deal with the clock condition.                                       */
  59   1      
  60   1          /* `#END` */
  61   1      
  62   1          /* If nothing else, stop here since the clocks have not started         */
  63   1          /* correctly.                                                           */
  64   1          while(1) {}
  65   1      }
  66          
  67          
  68          #undef CYCODE
  69          #undef CYDATA
  70          #undef CYXDATA
  71          #undef CYFAR
  72          #if defined(__C51__) || defined(__CX51__)
  73                  #define CYCODE code
  74                  #define CYDATA data
  75                  #define CYXDATA xdata
  76                  #define CYFAR far
  77          
  78                  #define CYPACKED
  79                  #define CYALIGNED
  80              #define DMAINITSEC
  81                  #define CY_CFG_MEMORY_BARRIER()
  82          
  83                  #ifndef CYCONFIGCPY_DECLARED
                              extern void cymemzero(void CYFAR *addr, uint16 size);
                              extern void cyconfigcpy(uint16 size, const void CYFAR *src, void CYFAR *dest) small;
                              extern void cyconfigcpycode(uint16 size, const void CYCODE *src, void CYFAR *dest);
                      #endif
  88          
  89          
  90                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  91                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  92                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  93          #else
                      #error Unsupported toolchain
              #endif
  96          
  97          /* Defines the layout and meaning of each entry in the cfg_memset_list used for clearing registers */
  98          typedef struct {
  99                  void CYFAR *address;
 100                  uint16 size;
 101          } CYPACKED cfg_memset_t;
 102          
 103          /* Defines the layout and meaning of each entry in the cfg_memcpy_list used for initializing registers */
 104          typedef struct {
 105                  void CYFAR *dest;
 106                  const void CYFAR *src;
 107                  uint16 size;
 108          } CYPACKED cfg_memcpy_t;
 109          
 110          /* TD structure for big-endian systems. Requires 2-byte endian swap */
 111          struct td_t {
 112                  uint16 size;
 113                  uint8 flags;
 114                  uint8 next_td_ptr;
 115                  uint16 src;
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 3   

 116                  uint16 dest;
 117          } CYPACKED;
 118          
 119          /* IDMUX Address: CYREG_IDMUX_DRQ_CTL0 Size (bytes): 6 */
 120          #define BS_IDMUX_VAL ((const uint8 CYFAR *)0x00080000)
 121          
 122          /* IOPORT_0 Address: CYDEV_PRTDSI_PRT0_BASE Size (bytes): 7 */
 123          #define BS_IOPORT_0_VAL ((const uint8 CYFAR *)0x00080008)
 124          
 125          /* IOPORT_3 Address: CYDEV_PRTDSI_PRT3_BASE Size (bytes): 7 */
 126          #define BS_IOPORT_3_VAL ((const uint8 CYFAR *)0x00080010)
 127          
 128          /* IOPORT_6 Address: CYDEV_PRTDSI_PRT6_BASE Size (bytes): 7 */
 129          #define BS_IOPORT_6_VAL ((const uint8 CYFAR *)0x00080018)
 130          
 131          /* UDB_1_4_1_CONFIG Address: CYDEV_UCFG_B0_P1_U0_BASE Size (bytes): 128 */
 132          #define BS_UDB_1_4_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080020)
 133          
 134          /* UDB_1_4_0_CONFIG Address: CYDEV_UCFG_B0_P1_U1_BASE Size (bytes): 128 */
 135          #define BS_UDB_1_4_0_CONFIG_VAL ((const uint8 CYFAR *)0x000800A0)
 136          
 137          /* UDB_1_1_0_CONFIG Address: CYDEV_UCFG_B1_P3_U1_BASE Size (bytes): 128 */
 138          #define BS_UDB_1_1_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080120)
 139          
 140          /* UWRK_B0_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070 Size (bytes): 32 */
 141          #define BS_UWRK_B0_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)0x000801A0)
 142          
 143          /* UDB_2_0_HV_ROUTING Address: CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 144          #define BS_UDB_2_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000801C0)
 145          
 146          /* UDBSWITCH_1_1 Address: CYDEV_UCFG_B1_P3_ROUTE_BASE Size (bytes): 128 */
 147          #define BS_UDBSWITCH_1_1_VAL ((const uint8 CYFAR *)0x00080240)
 148          
 149          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 150          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000802C0)
 151          
 152          /* UDB_2_3_HV_ROUTING Address: CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 153          #define BS_UDB_2_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080340)
 154          
 155          /* UDBSWITCH_1_4 Address: CYDEV_UCFG_B0_P1_ROUTE_BASE Size (bytes): 128 */
 156          #define BS_UDBSWITCH_1_4_VAL ((const uint8 CYFAR *)0x000803C0)
 157          
 158          /* UDB_2_4_HV_ROUTING Address: CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 159          #define BS_UDB_2_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080440)
 160          
 161          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 162          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)0x000804C0)
 163          
 164          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080 Size (bytes): 128 */
 165          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080540)
 166          
 167          /* DSISWITCH_1_1 Address: CYDEV_UCFG_DSI8_BASE Size (bytes): 128 */
 168          #define BS_DSISWITCH_1_1_VAL ((const uint8 CYFAR *)0x000805C0)
 169          
 170          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080 Size (bytes): 128 */
 171          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080640)
 172          
 173          /* DSI3_2_HV_ROUTING Address: CYDEV_UCFG_DSI3_BASE + 0x00000080 Size (bytes): 128 */
 174          #define BS_DSI3_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000806C0)
 175          
 176          /* DSI3_3_HV_ROUTING Address: CYDEV_UCFG_DSI2_BASE + 0x00000080 Size (bytes): 128 */
 177          #define BS_DSI3_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080740)
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 4   

 178          
 179          /* DSISWITCH_1_4 Address: CYDEV_UCFG_DSI1_BASE Size (bytes): 128 */
 180          #define BS_DSISWITCH_1_4_VAL ((const uint8 CYFAR *)0x000807C0)
 181          
 182          /* DSI3_4_HV_ROUTING Address: CYDEV_UCFG_DSI1_BASE + 0x00000080 Size (bytes): 128 */
 183          #define BS_DSI3_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080840)
 184          
 185          /* DSISWITCH_1_5 Address: CYDEV_UCFG_DSI0_BASE Size (bytes): 128 */
 186          #define BS_DSISWITCH_1_5_VAL ((const uint8 CYFAR *)0x000808C0)
 187          
 188          /* DSI3_5_HV_ROUTING Address: CYDEV_UCFG_DSI0_BASE + 0x00000080 Size (bytes): 128 */
 189          #define BS_DSI3_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080940)
 190          
 191          /* UCFG_BCTL1 Address: CYREG_BCTL1_MDCLK_EN Size (bytes): 16 */
 192          #define BS_UCFG_BCTL1_VAL ((const uint8 CYFAR *)0x000809C0)
 193          
 194          /* UCFG_BCTL0 Address: CYREG_BCTL0_MDCLK_EN Size (bytes): 16 */
 195          #define BS_UCFG_BCTL0_VAL ((const uint8 CYFAR *)0x000809D0)
 196          
 197          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 198          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x000809E0)
 199          
 200          /* IOPINS0_3 Address: CYREG_PRT3_DM0 Size (bytes): 8 */
 201          #define BS_IOPINS0_3_VAL ((const uint8 CYFAR *)0x000809E8)
 202          
 203          /* IOPINS0_6 Address: CYREG_PRT6_DR Size (bytes): 10 */
 204          #define BS_IOPINS0_6_VAL ((const uint8 CYFAR *)0x000809F0)
 205          
 206          
 207          /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 208          static const uint8 CYCODE CH1_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
             -;
 209          
 210          /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 211          static const uint8 CYCODE CH2_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00 }
             -;
 212          
 213          /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 214          static const uint8 CYCODE CH5_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 }
             -;
 215          
 216          /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 217          static const uint8 CYCODE CH6_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00 }
             -;
 218          
 219          /* Initialization data for each DMA channel's TD registers */
 220          static const uint8 CYCODE DMA_TD_START_CMD[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x01 };
 221          
 222          static uint32 CYXDATA DMA_ZERO_VAL CYALIGNED;
 223          
 224          /* This table holds all of the initialization data necessary for the DMA
 225             process to transfer data from the source location to the destination. */
 226          static const struct td_t CYCODE CFG_TD_LIST0[] DMAINITSEC = {
 227          /* Size, Flags, Next, Source, Destination */
 228                  { 8, 0x23, 0x02, (uint16)(&CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },        /* TD 1 */
 229                  { 8, 0x23, 0x03, (uint16)(&CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },        /* TD 2 */
 230                  { 8, 0x23, 0x04, (uint16)(&CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },        /* TD 3 */
 231                  { 8, 0x23, 0x05, (uint16)(&CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },        /* TD 4 */
 232                  { 5, 0x23, 0x06, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },     /* TD 5 */
 233                  { 5, 0x23, 0x07, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },     /* TD 6 */
 234                  { 5, 0x23, 0x08, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },     /* TD 7 */
 235                  { 5, 0x23, 0xFE, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },     /* TD 8 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 5   

 236                  { 32, 0x22, 0x0A, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT1_DR) },   /* TD 9 */
 237                  { 32, 0x22, 0x0B, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT4_DR) },   /* TD 10 */
 238                  { 16, 0x22, 0x0C, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT12_DR) },  /* TD 11 */
 239                  { 16, 0x22, 0xFE, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT15_DR) },  /* TD 12 */
 240                  { 512, 0x22, 0x0E, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },       /* TD 13 */
 241                  { 384, 0x22, 0x0F, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P2_U0_BASE) },       /* TD 14 */
 242                  { 2560, 0x22, 0x10, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P3_U0_BASE) },      /* TD 15 */
 243                  { 384, 0x22, 0x11, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },       /* TD 16 */
 244                  { 128, 0x22, 0x12, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P3_U0_BASE) },       /* TD 17 */
 245                  { 1024, 0x22, 0x13, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },      /* TD 18 */
 246                  { 128, 0x22, 0x14, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) },   /* TD 19 */
 247                  { 128, 0x22, 0x15, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE) },   /* TD 20 */
 248                  { 1024, 0x22, 0x16, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) },  /* TD 21 */
 249                  { 512, 0x22, 0xFE, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },  /* TD 22 */
 250                  { 7, 0x23, 0x18, (uint16)(BS_IOPORT_0_VAL), (uint16)(CYDEV_PRTDSI_PRT0_BASE) }, /* TD 23 */
 251                  { 7, 0x23, 0x19, (uint16)(BS_IOPORT_3_VAL), (uint16)(CYDEV_PRTDSI_PRT3_BASE) }, /* TD 24 */
 252                  { 7, 0x23, 0x1A, (uint16)(BS_IOPORT_6_VAL), (uint16)(CYDEV_PRTDSI_PRT6_BASE) }, /* TD 25 */
 253                  { 32, 0x23, 0xFE, (uint16)(BS_UWRK_B0_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BASE + 0x000000
             -70) },        /* TD 26 */
 254                  { 128, 0x23, 0x1C, (uint16)(BS_UDB_1_4_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P1_U0_BASE) },     /* TD 27 */
 255                  { 128, 0x23, 0x1D, (uint16)(BS_UDB_1_4_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P1_U1_BASE) },     /* TD 28 */
 256                  { 128, 0x23, 0x1E, (uint16)(BS_UDB_1_1_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U1_BASE) },     /* TD 29 */
 257                  { 128, 0x23, 0x1F, (uint16)(BS_UDB_2_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080
             -) },        /* TD 30 */
 258                  { 128, 0x23, 0x20, (uint16)(BS_UDBSWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE) },     /* TD 31 */
 259                  { 128, 0x23, 0x21, (uint16)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080
             -) },        /* TD 32 */
 260                  { 128, 0x23, 0x22, (uint16)(BS_UDB_2_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080
             -) },        /* TD 33 */
 261                  { 128, 0x23, 0x23, (uint16)(BS_UDBSWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE) },     /* TD 34 */
 262                  { 128, 0x23, 0x24, (uint16)(BS_UDB_2_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080
             -) },        /* TD 35 */
 263                  { 128, 0x23, 0x25, (uint16)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) },    /* TD 36 */
 264                  { 128, 0x23, 0x26, (uint16)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x00000080) },   /* 
             -TD 37 */
 265                  { 128, 0x23, 0x27, (uint16)(BS_DSISWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE) },    /* TD 38 */
 266                  { 128, 0x23, 0x28, (uint16)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x00000080) },   /* 
             -TD 39 */
 267                  { 128, 0x23, 0x29, (uint16)(BS_DSI3_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE + 0x00000080) },   /* 
             -TD 40 */
 268                  { 128, 0x23, 0x2A, (uint16)(BS_DSI3_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE + 0x00000080) },   /* 
             -TD 41 */
 269                  { 128, 0x23, 0x2B, (uint16)(BS_DSISWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE) },    /* TD 42 */
 270                  { 128, 0x23, 0x2C, (uint16)(BS_DSI3_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE + 0x00000080) },   /* 
             -TD 43 */
 271                  { 128, 0x23, 0x2D, (uint16)(BS_DSISWITCH_1_5_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) },    /* TD 44 */
 272                  { 128, 0x23, 0x2E, (uint16)(BS_DSI3_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE + 0x00000080) },   /* 
             -TD 45 */
 273                  { 16, 0x23, 0x2F, (uint16)(BS_UCFG_BCTL1_VAL), (uint16)(CYREG_BCTL1_MDCLK_EN) },        /* TD 46 */
 274                  { 16, 0x23, 0xFE, (uint16)(BS_UCFG_BCTL0_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) },        /* TD 47 */
 275          };
 276          /*******************************************************************************
 277          * Function Name: cfg_dma_init
 278          ********************************************************************************
 279          * Summary:
 280          *  This function is used to copy device configuration data from constant values
 281          *  stored in memory into the proper chip configuration registers using DMA.  It
 282          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 283          *
 284          * Parameters:  
 285          *   void
 286          *
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 6   

 287          * Return:
 288          *   void
 289          *
 290          *******************************************************************************/
 291          static void cfg_dma_init(void)
 292          {
 293   1              DMA_ZERO_VAL = 0u;
 294   1              DMAC_CFGMEM[0].CFG0[0] = 0x10;          /* set burstcount */
 295   1              DMAC_CH[0].basic_cfg[0] = 0x01u;        /* enable channel0 */
 296   1              DMAC_CH[0].basic_status[1] = 0;         /* set channel0's first td to 0 */
 297   1              
 298   1              DMAC_TDMEM[0].TD0[2] = 0x01;            /* set td0's next td to 1 */
 299   1              DMAC_TDMEM[0].TD0[3] = 0xA3;            /* set td0's flags */
 300   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD0[0], 47*8);                                    /* set td0's size */
 301   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD1[0], (uint16)(uint32)CFG_TD_LIST0);    /* set td0's src addr */
 302   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD1[2], CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst addr */
 303   1              CY_SET_REG16((reg16 *) &DMAC_CFGMEM[0].CFG1[0], (uint16)(CYDEV_FLS_BASE >> 16));                                /* set ch0's src high
             - addr */
 304   1              CY_SET_REG16((reg16 *) &DMAC_CFGMEM[0].CFG1[2], (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));                                /* set ch0's 
             -dst high addr */
 305   1              DMAC_CH[1].basic_status[1] = 0x09; /* First TD = 9 */
 306   1              DMAC_CH[2].basic_status[1] = 0x0D; /* First TD = 13 */
 307   1              DMAC_CH[5].basic_status[1] = 0x17; /* First TD = 23 */
 308   1              DMAC_CH[6].basic_status[1] = 0x1B; /* First TD = 27 */
 309   1      
 310   1              CY_CFG_MEMORY_BARRIER();
 311   1              DMAC_CH[0].action[0] = CPU_REQ;    /* initiate the DMA transfer */
 312   1              CY_CFG_MEMORY_BARRIER();
 313   1      
 314   1              /* Wait for all DMA transfers to complete */
 315   1              while((CY_GET_REG8(CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 316   1              while((CY_GET_REG8(CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 317   1              while((CY_GET_REG8(CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 318   1              while((CY_GET_REG8(CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 319   1              while((CY_GET_REG8(CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 320   1      
 321   1      
 322   1              CYCONFIGCPY((void CYFAR *)(CYREG_IDMUX_DRQ_CTL0), (void CYFAR *)(BS_IDMUX_VAL), 6);
 323   1      
 324   1      }
 325          /*******************************************************************************
 326          * Function Name: ClockSetup
 327          ********************************************************************************
 328          *
 329          * Summary:
 330          *  Performs the initialization of all of the clocks in the device based on the
 331          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 332          *  clocks and setting the necessary dividers to produce the desired frequency. 
 333          *
 334          * Parameters:
 335          *  void
 336          *
 337          * Return:
 338          *  void
 339          *
 340          *******************************************************************************/
 341          static void ClockSetup(void)
 342          {
 343   1              reg32  timeout;
 344   1              reg32* timeout_p = &timeout;
 345   1              reg8   pllLock;
 346   1      
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 7   

 347   1      
 348   1              /* Configure Digital Clocks based on settings from Clock DWR */
 349   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x19000B);
 350   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x19176F);
 351   1      
 352   1              /* Configure ILO based on settings from Clock DWR */
 353   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02);
 354   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08);
 355   1      
 356   1              /* Configure IMO based on settings from Clock DWR */
 357   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03);
 358   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8(CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)));
 359   1      
 360   1              /* Configure PLL based on settings from Clock DWR */
 361   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008);
 362   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051);
 363   1              /* Wait up to 250us for the PLL to lock */
 364   1              pllLock = 0;
 365   1              for (timeout = 250 / 10; *timeout_p && (pllLock != 0x03u); timeout--) { 
 366   2                      pllLock = 0x03u & ((pllLock << 1) | ((CY_GET_REG8(CYREG_FASTCLK_PLL_SR) & 0x01u) >> 0));
 367   2                      CyDelayCycles(10 * 48); /* Delay 10us based on 48MHz clock */
 368   2              }
 369   1      
 370   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 371   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100);
 372   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07);
 373   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00);
 374   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48);
 375   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00);
 376   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02);
 377   1      
 378   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8(CYREG_PM_ACT_CFG2) | 0x03)));
 379   1      }
 380          
 381          
 382          /* Analog API Functions */
 383          
 384          /*******************************************************************************
 385          * Function Name: AnalogSetDefault
 386          ********************************************************************************
 387          *
 388          * Summary:
 389          *  Sets up the analog portions of the chip to default values based on chip
 390          *  configuration options from the project.
 391          *
 392          * Parameters:
 393          *  void
 394          *
 395          * Return:
 396          *  void
 397          *
 398          *******************************************************************************/
 399          void AnalogSetDefault(void)
 400          {
 401   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u);
 402   1              CY_SET_REG8(CYREG_BG_DFT0, bg_xover_inl_trim & 0x07u);
 403   1              CY_SET_REG8(CYREG_BG_DFT1, (bg_xover_inl_trim >> 4) & 0x0Fu);
 404   1              CY_SET_REG8(CYREG_PUMP_CR0, 0x44);
 405   1      }
 406          
 407          
 408          /*******************************************************************************
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 8   

 409          * Function Name: SetAnalogRoutingPumps
 410          ********************************************************************************
 411          *
 412          * Summary:
 413          * Enables or disables the analog pumps feeding analog routing switches.
 414          * Intended to be called at startup, based on the Vdda system configuration;
 415          * may be called during operation when the user informs us that the Vdda voltage crossed the pump threshold
             -.
 416          *
 417          * Parameters:
 418          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 419          *
 420          * Return:
 421          *  void
 422          *
 423          *******************************************************************************/
 424          void SetAnalogRoutingPumps(uint8 enabled)
 425          {
 426   1              uint8 regValue = CY_GET_REG8(CYREG_PUMP_CR0);
 427   1              if (enabled)
 428   1                      regValue |= 0x00;
 429   1              else
 430   1                      regValue &= ~0x00;
 431   1              CY_SET_REG8(CYREG_PUMP_CR0, regValue);
 432   1      }
 433          
 434          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 435          
 436          
 437          /*******************************************************************************
 438          * Function Name: cyfitter_cfg
 439          ********************************************************************************
 440          * Summary:
 441          *  This function is called by the start-up code for the selected device. It
 442          *  performs all of the necessary device configuration based on the design
 443          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 444          *  as Clocks and Pins as well as any component configuration that is necessary.
 445          *
 446          * Parameters:  
 447          *   void
 448          *
 449          * Return:
 450          *   void
 451          *
 452          *******************************************************************************/
 453          void cyfitter_cfg(void)
 454          {
 455   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 456   1              CY_SET_XTND_REG8(CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8(CYREG_MLOGIC_DEBUG) | 0x05));
 457   1      
 458   1              {
 459   2                      cfg_dma_init();
 460   2      
 461   2                      /* Perform normal device configuration. Order is not critical for these items. */
 462   2                      CYMEMZERO((void CYFAR *)(CYREG_PHUB_CFGMEM0_CFG0), 4);
 463   2                      CYMEMZERO((void CYFAR *)(CYREG_PHUB_CFGMEM1_CFG0), 4);
 464   2                      CYMEMZERO((void CYFAR *)(CYREG_PHUB_CFGMEM2_CFG0), 4);
 465   2      
 466   2                      /* Enable digital routing */
 467   2                      CY_SET_XTND_REG8(CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL0_BANK_CTL) | 0x02u);
 468   2                      CY_SET_XTND_REG8(CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL1_BANK_CTL) | 0x02u);
 469   2      
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 9   

 470   2                      /* Enable UDB array */
 471   2                      CY_SET_REG8(CYREG_PM_ACT_CFG0, CY_GET_REG8(CYREG_PM_ACT_CFG0) | 0x40u);
 472   2                      CY_SET_REG8(CYREG_PM_AVAIL_CR2, CY_GET_REG8(CYREG_PM_AVAIL_CR2) | 0x10u);
 473   2              }
 474   1      
 475   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 476   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (void CYFAR *)(BS_IOPINS0_0_VAL), 8);
 477   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT3_DM0), (void CYFAR *)(BS_IOPINS0_3_VAL), 8);
 478   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT6_DR), (void CYFAR *)(BS_IOPINS0_6_VAL), 10);
 479   1      
 480   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 481   1              CY_SET_REG8(CYDEV_BOOST_CR2, (CY_GET_REG8(CYDEV_BOOST_CR2) | 0x08));
 482   1              if (CYDEV_CHIP_REV_ACTUAL < 5)
 483   1              {
 484   2                      CY_SET_REG8(CYDEV_MFGCFG_PWRSYS_WAKE_TR2, 0x3A);
 485   2              }
 486   1      
 487   1      
 488   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 489   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0xF1 : 0xC0));
 490   1              /* Setup clocks based on selections from Clock DWR */
 491   1              ClockSetup();
 492   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 493   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0xB1 : 0x80));
 494   1      
 495   1              /* Perform basic analog initialization to defaults */
 496   1              AnalogSetDefault();
 497   1      
 498   1              /* Configure alternate active mode */
 499   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (void CYFAR *)CYDEV_PM_ACT_BASE, 14);
 500   1              CY_SET_REG8(CYREG_PM_STBY_CFG0, CY_GET_REG8(CYREG_PM_STBY_CFG0) & ~0x02u);      /* Disable CPU */
 501   1      }
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 49
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 52
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 64
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#DMA_ZERO_VAL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 294
000E 907600            MOV     DPTR,#07600H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
0014 907010            MOV     DPTR,#07010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
001A 907019            MOV     DPTR,#07019H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 298
001F 907802            MOV     DPTR,#07802H
0022 7401              MOV     A,#01H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
0025 907803            MOV     DPTR,#07803H
0028 74A3              MOV     A,#0A3H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
002B 7B02              MOV     R3,#02H
002D 7A78              MOV     R2,#078H
002F 7900              MOV     R1,#00H
0031 7D78              MOV     R5,#078H
0033 7C01              MOV     R4,#01H
0035 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 301
0038 7B02              MOV     R3,#02H
003A 7A78              MOV     R2,#078H
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 11  

003C 7904              MOV     R1,#04H
003E C003              PUSH    AR3
0040 C002              PUSH    AR2
0042 C001              PUSH    AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0048 7900        R     MOV     R1,#LOW CFG_TD_LIST0
004A AC02              MOV     R4,AR2
004C AD01              MOV     R5,AR1
004E D001              POP     AR1
0050 D002              POP     AR2
0052 D003              POP     AR3
0054 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 302
0057 7B02              MOV     R3,#02H
0059 7A78              MOV     R2,#078H
005B 7906              MOV     R1,#06H
005D 7D08              MOV     R5,#08H
005F 7C78              MOV     R4,#078H
0061 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 303
0064 7B02              MOV     R3,#02H
0066 7A76              MOV     R2,#076H
0068 7904              MOV     R1,#04H
006A 7D10              MOV     R5,#010H
006C 7C00              MOV     R4,#00H
006E 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 304
0071 7B02              MOV     R3,#02H
0073 7A76              MOV     R2,#076H
0075 7906              MOV     R1,#06H
0077 7D00              MOV     R5,#00H
0079 7C00              MOV     R4,#00H
007B 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 305
007E 907029            MOV     DPTR,#07029H
0081 7409              MOV     A,#09H
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
0084 907039            MOV     DPTR,#07039H
0087 740D              MOV     A,#0DH
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
008A 907069            MOV     DPTR,#07069H
008D 7417              MOV     A,#017H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
0090 907079            MOV     DPTR,#07079H
0093 741B              MOV     A,#01BH
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
0096 907014            MOV     DPTR,#07014H
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
009C         ?C0004:
                                           ; SOURCE LINE # 315
009C 907018            MOV     DPTR,#07018H
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 20E0F7            JB      ACC.0,?C0004
00A5         ?C0005:
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 12  

00A5         ?C0006:
                                           ; SOURCE LINE # 316
00A5 907028            MOV     DPTR,#07028H
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB 20E0F7            JB      ACC.0,?C0006
00AE         ?C0007:
00AE         ?C0008:
                                           ; SOURCE LINE # 317
00AE 907038            MOV     DPTR,#07038H
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 20E0F7            JB      ACC.0,?C0008
00B7         ?C0009:
00B7         ?C0010:
                                           ; SOURCE LINE # 318
00B7 907068            MOV     DPTR,#07068H
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC EF                MOV     A,R7
00BD 20E0F7            JB      ACC.0,?C0010
00C0         ?C0011:
00C0         ?C0012:
                                           ; SOURCE LINE # 319
00C0 907078            MOV     DPTR,#07078H
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 EF                MOV     A,R7
00C6 20E0F7            JB      ACC.0,?C0012
00C9         ?C0013:
                                           ; SOURCE LINE # 322
00C9 7B08              MOV     R3,#08H
00CB 7A00              MOV     R2,#00H
00CD 7900              MOV     R1,#00H
00CF C003              PUSH    AR3
00D1 C002              PUSH    AR2
00D3 C001              PUSH    AR1
00D5 7B01              MOV     R3,#01H
00D7 7A51              MOV     R2,#051H
00D9 7910              MOV     R1,#010H
00DB 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00DE 120000      E     LCALL   ?C?PSTXDATA
00E1 D001              POP     AR1
00E3 D002              POP     AR2
00E5 D003              POP     AR3
00E7 7F06              MOV     R7,#06H
00E9 7E00              MOV     R6,#00H
00EB 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 324
00EE 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 344
0000 7E00        R     MOV     R6,#HIGH timeout
0002 7F00        R     MOV     R7,#LOW timeout
0004 900000      R     MOV     DPTR,#timeout_p
0007 EE                MOV     A,R6
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 13  

0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
000C 7B00              MOV     R3,#00H
000E 7A40              MOV     R2,#040H
0010 7980              MOV     R1,#080H
0012 7F0B              MOV     R7,#0BH
0014 7E00              MOV     R6,#00H
0016 7D19              MOV     R5,#019H
0018 7C00              MOV     R4,#00H
001A 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 350
001D 7B00              MOV     R3,#00H
001F 7A40              MOV     R2,#040H
0021 7984              MOV     R1,#084H
0023 7F6F              MOV     R7,#06FH
0025 7E17              MOV     R6,#017H
0027 7D19              MOV     R5,#019H
0029 7C00              MOV     R4,#00H
002B 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 353
002E 904300            MOV     DPTR,#04300H
0031 7402              MOV     A,#02H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
0034 904000            MOV     DPTR,#04000H
0037 7408              MOV     A,#08H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
003A 904200            MOV     DPTR,#04200H
003D 7403              MOV     A,#03H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
0040 7B0C              MOV     R3,#0CH
0042 7A01              MOV     R2,#01H
0044 7908              MOV     R1,#08H
0046 120000      E     LCALL   _cyread8
0049 9046A1            MOV     DPTR,#046A1H
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
004E 7B00              MOV     R3,#00H
0050 7A42              MOV     R2,#042H
0052 7922              MOV     R1,#022H
0054 7D08              MOV     R5,#08H
0056 7C00              MOV     R4,#00H
0058 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 362
005B 7B00              MOV     R3,#00H
005D 7A42              MOV     R2,#042H
005F 7920              MOV     R1,#020H
0061 7D51              MOV     R5,#051H
0063 7C10              MOV     R4,#010H
0065 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 364
0068 900000      R     MOV     DPTR,#pllLock
006B E4                CLR     A
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
006D 7F19              MOV     R7,#019H
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 14  

006F 7E00              MOV     R6,#00H
0071 7D00              MOV     R5,#00H
0073 7C00              MOV     R4,#00H
0075 900000      R     MOV     DPTR,#timeout
0078 120000      E     LCALL   ?C?LSTXDATA
007B         ?C0015:
007B 900000      R     MOV     DPTR,#timeout_p
007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 A3                INC     DPTR
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 8F82              MOV     DPL,R7
0085 8E83              MOV     DPH,R6
0087 120000      E     LCALL   ?C?LLDXDATA
008A EC                MOV     A,R4
008B 4D                ORL     A,R5
008C 4E                ORL     A,R6
008D 4F                ORL     A,R7
008E 604E              JZ      ?C0016
0090 900000      R     MOV     DPTR,#pllLock
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
0095 EF                MOV     A,R7
0096 6403              XRL     A,#03H
0098 6044              JZ      ?C0016
                                           ; SOURCE LINE # 366
009A 904225            MOV     DPTR,#04225H
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
009F EF                MOV     A,R7
00A0 5401              ANL     A,#01H
00A2 FF                MOV     R7,A
00A3 7E00              MOV     R6,#00H
00A5 900000      R     MOV     DPTR,#pllLock
00A8 E0                MOVX    A,@DPTR
00A9 FE                MOV     R6,A
00AA EE                MOV     A,R6
00AB 25E0              ADD     A,ACC
00AD FE                MOV     R6,A
00AE EE                MOV     A,R6
00AF 4F                ORL     A,R7
00B0 FF                MOV     R7,A
00B1 EF                MOV     A,R7
00B2 5403              ANL     A,#03H
00B4 FF                MOV     R7,A
00B5 900000      R     MOV     DPTR,#pllLock
00B8 EF                MOV     A,R7
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
00BA 7FE0              MOV     R7,#0E0H
00BC 7E01              MOV     R6,#01H
00BE 7D00              MOV     R5,#00H
00C0 7C00              MOV     R4,#00H
00C2 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 368
00C5 900000      R     MOV     DPTR,#timeout
00C8 120000      E     LCALL   ?C?LLDXDATA
00CB 7BFF              MOV     R3,#0FFH
00CD 7AFF              MOV     R2,#0FFH
00CF 79FF              MOV     R1,#0FFH
00D1 78FF              MOV     R0,#0FFH
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 15  

00D3 120000      E     LCALL   ?C?LADD
00D6 900000      R     MOV     DPTR,#timeout
00D9 120000      E     LCALL   ?C?LSTXDATA
00DC 809D              SJMP    ?C0015
00DE         ?C0016:
                                           ; SOURCE LINE # 371
00DE 7B00              MOV     R3,#00H
00E0 7A40              MOV     R2,#040H
00E2 7904              MOV     R1,#04H
00E4 7D00              MOV     R5,#00H
00E6 7C01              MOV     R4,#01H
00E8 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 372
00EB 904004            MOV     DPTR,#04004H
00EE 7407              MOV     A,#07H
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
00F1 904006            MOV     DPTR,#04006H
00F4 E4                CLR     A
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
00F6 904008            MOV     DPTR,#04008H
00F9 7448              MOV     A,#048H
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
00FC 904004            MOV     DPTR,#04004H
00FF E4                CLR     A
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
0101 904001            MOV     DPTR,#04001H
0104 7402              MOV     A,#02H
0106 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
0107 9043A2            MOV     DPTR,#043A2H
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C EF                MOV     A,R7
010D 4403              ORL     A,#03H
010F FF                MOV     R7,A
0110 EF                MOV     A,R7
0111 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
0112 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 16  

0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 424
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0020
                                           ; SOURCE LINE # 428
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
0025 800E              SJMP    ?C0021
0027         ?C0020:
                                           ; SOURCE LINE # 430
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 17  

002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
0035         ?C0021:
                                           ; SOURCE LINE # 431
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 456
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
0016 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 462
0019 7B00              MOV     R3,#00H
001B 7A76              MOV     R2,#076H
001D 7900              MOV     R1,#00H
001F 7D04              MOV     R5,#04H
0021 7C00              MOV     R4,#00H
0023 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 463
0026 7B00              MOV     R3,#00H
0028 7A76              MOV     R2,#076H
002A 7908              MOV     R1,#08H
002C 7D04              MOV     R5,#04H
002E 7C00              MOV     R4,#00H
0030 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 464
0033 7B00              MOV     R3,#00H
0035 7A76              MOV     R2,#076H
0037 7910              MOV     R1,#010H
0039 7D04              MOV     R5,#04H
003B 7C00              MOV     R4,#00H
003D 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 467
0040 7B01              MOV     R3,#01H
0042 7A50              MOV     R2,#050H
0044 7903              MOV     R1,#03H
0046 120000      E     LCALL   _cyread8
0049 EF                MOV     A,R7
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 18  

004A 4402              ORL     A,#02H
004C FD                MOV     R5,A
004D 7B01              MOV     R3,#01H
004F 7A50              MOV     R2,#050H
0051 7903              MOV     R1,#03H
0053 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 468
0056 7B01              MOV     R3,#01H
0058 7A50              MOV     R2,#050H
005A 7913              MOV     R1,#013H
005C 120000      E     LCALL   _cyread8
005F EF                MOV     A,R7
0060 4402              ORL     A,#02H
0062 FD                MOV     R5,A
0063 7B01              MOV     R3,#01H
0065 7A50              MOV     R2,#050H
0067 7913              MOV     R1,#013H
0069 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 471
006C 9043A0            MOV     DPTR,#043A0H
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 4440              ORL     A,#040H
0074 FF                MOV     R7,A
0075 9043A0            MOV     DPTR,#043A0H
0078 EF                MOV     A,R7
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
007A 9043C2            MOV     DPTR,#043C2H
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 4410              ORL     A,#010H
0082 FF                MOV     R7,A
0083 9043C2            MOV     DPTR,#043C2H
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 476
0088 7B08              MOV     R3,#08H
008A 7A09              MOV     R2,#09H
008C 79E0              MOV     R1,#0E0H
008E C003              PUSH    AR3
0090 C002              PUSH    AR2
0092 C001              PUSH    AR1
0094 7B00              MOV     R3,#00H
0096 7A51              MOV     R2,#051H
0098 7902              MOV     R1,#02H
009A 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
009D 120000      E     LCALL   ?C?PSTXDATA
00A0 D001              POP     AR1
00A2 D002              POP     AR2
00A4 D003              POP     AR3
00A6 7F08              MOV     R7,#08H
00A8 7E00              MOV     R6,#00H
00AA 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 477
00AD 7B08              MOV     R3,#08H
00AF 7A09              MOV     R2,#09H
00B1 79E8              MOV     R1,#0E8H
00B3 C003              PUSH    AR3
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 19  

00B5 C002              PUSH    AR2
00B7 C001              PUSH    AR1
00B9 7B00              MOV     R3,#00H
00BB 7A51              MOV     R2,#051H
00BD 7932              MOV     R1,#032H
00BF 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00C2 120000      E     LCALL   ?C?PSTXDATA
00C5 D001              POP     AR1
00C7 D002              POP     AR2
00C9 D003              POP     AR3
00CB 7F08              MOV     R7,#08H
00CD 7E00              MOV     R6,#00H
00CF 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 478
00D2 7B08              MOV     R3,#08H
00D4 7A09              MOV     R2,#09H
00D6 79F0              MOV     R1,#0F0H
00D8 C003              PUSH    AR3
00DA C002              PUSH    AR2
00DC C001              PUSH    AR1
00DE 7B00              MOV     R3,#00H
00E0 7A51              MOV     R2,#051H
00E2 7960              MOV     R1,#060H
00E4 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00E7 120000      E     LCALL   ?C?PSTXDATA
00EA D001              POP     AR1
00EC D002              POP     AR2
00EE D003              POP     AR3
00F0 7F0A              MOV     R7,#0AH
00F2 7E00              MOV     R6,#00H
00F4 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 481
00F7 904322            MOV     DPTR,#04322H
00FA E0                MOVX    A,@DPTR
00FB FF                MOV     R7,A
00FC EF                MOV     A,R7
00FD 4408              ORL     A,#08H
00FF FF                MOV     R7,A
0100 EF                MOV     A,R7
0101 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
0102 9046EC            MOV     DPTR,#046ECH
0105 E0                MOVX    A,@DPTR
0106 FF                MOV     R7,A
0107 EF                MOV     A,R7
0108 C3                CLR     C
0109 9405              SUBB    A,#05H
010B 5006              JNC     ?C0023
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
010D 904689            MOV     DPTR,#04689H
0110 743A              MOV     A,#03AH
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
0113         ?C0023:
                                           ; SOURCE LINE # 489
0113 904800            MOV     DPTR,#04800H
0116 74F1              MOV     A,#0F1H
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
0119 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 493
C51 COMPILER V9.03   CYFITTER_CFG                                                          10/10/2012 15:06:23 PAGE 20  

011C 904800            MOV     DPTR,#04800H
011F 74B1              MOV     A,#0B1H
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
0122 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 499
0125 7B00              MOV     R3,#00H
0127 7A43              MOV     R2,#043H
0129 79A0              MOV     R1,#0A0H
012B C003              PUSH    AR3
012D C002              PUSH    AR2
012F C001              PUSH    AR1
0131 7B00              MOV     R3,#00H
0133 7A43              MOV     R2,#043H
0135 79B0              MOV     R1,#0B0H
0137 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
013A 120000      E     LCALL   ?C?PSTXDATA
013D D001              POP     AR1
013F D002              POP     AR2
0141 D003              POP     AR3
0143 7F0E              MOV     R7,#0EH
0145 7E00              MOV     R6,#00H
0147 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 500
014A 9043B0            MOV     DPTR,#043B0H
014D E0                MOVX    A,@DPTR
014E FF                MOV     R7,A
014F EF                MOV     A,R7
0150 54FD              ANL     A,#0FDH
0152 FF                MOV     R7,A
0153 9043B0            MOV     DPTR,#043B0H
0156 EF                MOV     A,R7
0157 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
0158 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    995    ----
   CONSTANT SIZE    =    413    ----
   XDATA SIZE       =      4      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
