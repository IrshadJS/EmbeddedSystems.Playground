FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2401
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    1.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C28xxx microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting	
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) 
                                        (0082) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0083) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0084) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0085) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0086) ; bytes on the stack which are otherwise required for the return address. If
                                        (0087) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0088) ; release, the C compiler automatically places an infinite loop at the end
                                        (0089) ; of main, rather than a return instruction.)
                                        (0090) ;
                                        (0091) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0092) 
                                        (0093) 
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ; Interrupt Vector Table
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0099) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0100) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0101) ; vector jump targets are modified automatically according to the user
                                        (0102) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0103) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0104) ; configuration files. If you need to hard code a vector, update the
                                        (0105) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0106) ; of this file.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) 
                                        (0109)     AREA TOP (ROM, ABS, CON)
                                        (0110) 
                                        (0111)     org   0                        ;Reset Interrupt Vector
                                        (0112) IF	(TOOLCHAIN & HITECH)
                                        (0113) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0114) ELSE
0000: 80 7F    JMP   0x0080             (0115)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0116) ENDIF
                                        (0117)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0118)     ;---------------------------------------------------
                                        (0119)     ; Insert your custom code below this banner
                                        (0120)     ;---------------------------------------------------
                                        (0121) 
                                        (0122)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0123)     halt                           ;Stop execution if power falls too low
                                        (0124) 
                                        (0125)     org   08h                      ;Analog Column 0 / Decimator 0 Interrupt Vector
                                        (0126)     // call	void_handler
0008: 7E       RETI                     (0127)     reti
                                        (0128) 
                                        (0129)     org   0Ch                      ;Analog Column 1 / Decimator 1 Interrupt Vector
                                        (0130)     // call	void_handler
000C: 7E       RETI                     (0131)     reti
                                        (0132) 
                                        (0133)     org   10h                      ;Analog Column 2 / Decimator 2 Interrupt Vector
                                        (0134)     // call	void_handler
0010: 7E       RETI                     (0135)     reti
                                        (0136) 
                                        (0137)     org   14h                      ;Analog Column 3 / Decimator 3 Interrupt Vector
                                        (0138)     // call	void_handler
0014: 7E       RETI                     (0139)     reti
                                        (0140)     
                                        (0141)     org   18h                      ;VC3 Interrupt Vector
                                        (0142)     // call	void_handler
0018: 7E       RETI                     (0143)     reti
                                        (0144) 
                                        (0145)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0146)     // call	void_handler
001C: 7E       RETI                     (0147)     reti
                                        (0148) 
                                        (0149)     org   20h                      ;PSoC Block DBC00 Interrupt Vector
                                        (0150)     // call	void_handler
0020: 7E       RETI                     (0151)     reti
                                        (0152) 
                                        (0153)     org   24h                      ;PSoC Block DBC01 Interrupt Vector
                                        (0154)     // call	void_handler
0024: 7E       RETI                     (0155)     reti
                                        (0156) 
                                        (0157)     org   28h                      ;PSoC Block DCC02 Interrupt Vector
                                        (0158)     // call	void_handler
0028: 7E       RETI                     (0159)     reti
                                        (0160) 
                                        (0161)     org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
                                        (0162)     // call	void_handler
002C: 7E       RETI                     (0163)     reti
                                        (0164)     
                                        (0165)     org   30h                      ;PSoC Block DBC10 Interrupt Vector
                                        (0166)     // call	void_handler
0030: 7E       RETI                     (0167)     reti
                                        (0168) 
                                        (0169)     org   34h                      ;PSoC Block DBC11 Interrupt Vector
                                        (0170)     // call	void_handler
0034: 7E       RETI                     (0171)     reti
                                        (0172) 
                                        (0173)     org   38h                      ;PSoC Block DCC12 Interrupt Vector
                                        (0174)     // call	void_handler
0038: 7E       RETI                     (0175)     reti
                                        (0176) 
                                        (0177)     org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
                                        (0178)     // call	void_handler
003C: 7E       RETI                     (0179)     reti
                                        (0180) 
                                        (0181) 	org   40h                      ;PSoC Block DBC20 Interrupt Vector
                                        (0182)     // call	void_handler
0040: 7E       RETI                     (0183)     reti
                                        (0184) 	
                                        (0185) 	org   44h                      ;PSoC Block DBC21 Interrupt Vector
                                        (0186)     // call	void_handler
0044: 7E       RETI                     (0187)     reti
                                        (0188) 	
                                        (0189) 	org   48h                      ;PSoC Block DCC22 Interrupt Vector
                                        (0190)     // call	void_handler
0048: 7E       RETI                     (0191)     reti
                                        (0192) 	
                                        (0193) 	org   4Ch                      ;PSoC Block DCC23 Interrupt Vector
                                        (0194)     // call	void_handler
004C: 7E       RETI                     (0195)     reti
                                        (0196) 	 
                                        (0197)     org   60h                      ;PSoC I2C0 Interrupt Vector
                                        (0198)     // call	void_handler
0060: 7E       RETI                     (0199)     reti
                                        (0200) 
                                        (0201) 	org   64h                      ;PSoC I2C1 Interrupt Vector
                                        (0202)     // call	void_handler
0064: 7E       RETI                     (0203)     reti
                                        (0204) 	
                                        (0205) 	org   68h                      ;PSoC SARADC Interrupt Vector
                                        (0206)     // call	void_handler
0068: 7E       RETI                     (0207)     reti
                                        (0208) 	
                                        (0209) 	org   6Ch                      ;PSoC RTC Interrupt Vector
                                        (0210)     // call	void_handler
006C: 7E       RETI                     (0211)     reti
                                        (0212) 	
                                        (0213) 	org   70h                      ;Analog Column 4 Interrupt Vector
                                        (0214)     // call	void_handler
0070: 7E       RETI                     (0215)     reti
                                        (0216) 	
                                        (0217) 	org   74h                      ;Analog Column 5 Interrupt Vector
                                        (0218)     // call	void_handler
0074: 7E       RETI                     (0219)     reti
                                        (0220) 	
                                        (0221)     org   7Ch                      ;Sleep Timer Interrupt Vector
                                        (0222)     // call	void_handler
007C: 7E       RETI                     (0223)     reti
0080: 71 10    OR    F,0x10             
                                        (0224)     ;---------------------------------------------------
                                        (0225)     ; Insert your custom code above this banner
                                        (0226)     ;---------------------------------------------------
                                        (0227)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0228) 
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;  Start of Execution.
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0233) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0234) ;
                                        (0235) 
                                        (0236) IF	(TOOLCHAIN & HITECH)
                                        (0237)  	AREA PD_startup(CODE, REL, CON)
                                        (0238) ELSE
                                        (0239)     org 80h
                                        (0240) ENDIF
                                        (0241) __Start:
                                        (0242) 
                                        (0243)     ; initialize SMP values for voltage stabilization, if required,
                                        (0244)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0245)     ; least for now. 
                                        (0246)     ;
                                        (0247)     M8C_SetBank1
0082: 62 E3 87 MOV   REG[0xE3],0x87     (0248)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0085: 70 EF    AND   F,0xEF             
0087: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0249)     M8C_SetBank0
                                        (0250) 
                                        (0251) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0252) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0253)     M8C_EnableWatchDog
                                        (0254) ENDIF
                                        (0255) 
                                        (0256) IF ( SELECT_32K )
                                        (0257)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0258) ELSE
008A: 41 FE FB AND   REG[0xFE],0xFB     (0259)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0260) ENDIF
                                        (0261) 
                                        (0262)     ;---------------------------
                                        (0263)     ; Set up the Temporary stack
                                        (0264)     ;---------------------------
                                        (0265)     ; A temporary stack is set up for the SSC instructions.
                                        (0266)     ; The real stack start will be assigned later.
                                        (0267)     ;
                                        (0268) _stack_start:          equ 80h
008D: 50 80    MOV   A,0x80             (0269)     mov   A, _stack_start          ; Set top of stack to end of used RAM
008F: 4E       SWAP  SP,A               (0270)     swap  SP, A                    ; This is only temporary if going to LMM
0090: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0271) 
                                        (0272)     ;------------------------
                                        (0273)     ; Set Power-related Trim 
                                        (0274)     ;------------------------
                                        (0275) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0276) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0277)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0278)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0279)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0280) ELSE
                                        (0281) 	IF ( AGND_BYPASS )
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0284)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0285)     ; value using the proper trim values.
                                        (0286)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0287)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0288)   ENDIF
                                        (0289)  ENDIF
                                        (0290) ENDIF ; 5.0 V Operation
                                        (0291) 
                                        (0292) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0293)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0294)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0295)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0297)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0298)  ENDIF
                                        (0299) ENDIF ; 3.3 Volt Operation
                                        (0300) 
                                        (0301) 
0093: 55 F8 00 MOV   [0xF8],0x0         (0302)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0096: 55 F9 00 MOV   [0xF9],0x0         (0303)     mov  [bSSC_KEYSP], 0
0099: 71 10    OR    F,0x10             
                                        (0304) 
                                        (0305)     ;---------------------------------------
                                        (0306)     ; Initialize Crystal Oscillator and PLL
                                        (0307)     ;---------------------------------------
                                        (0308) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0309)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0310)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0311)     ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
                                        (0312)     ; the ECO to stabilize.
                                        (0313)     ;
                                        (0314)     M8C_SetBank1
                                        (0315)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0316)     M8C_SetBank0
                                        (0317)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0318)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0319)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0320) .WaitFor1s:
                                        (0321)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0322)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0323)                                           ;  since interrupts are not globally enabled
                                        (0324) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0325)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0326)     M8C_SetBank1
009B: 62 E0 02 MOV   REG[0xE0],0x2      (0327)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
009E: 70 EF    AND   F,0xEF             
00A0: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0328)     M8C_SetBank0
                                        (0329)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0330) 
                                        (0331) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0332) 
                                        (0333) IF ( PLL_MODE )
                                        (0334)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0335)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0336)     ;
                                        (0337)     M8C_SetBank1
                                        (0338)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0339)     M8C_SetBank0
                                        (0340)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0341)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0342) 
                                        (0343) .WaitFor16ms:
                                        (0344)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0345)     jz   .WaitFor16ms
                                        (0346)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0347)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0348)     M8C_SetBank0
                                        (0349) 
                                        (0350) IF      ( WAIT_FOR_32K )
                                        (0351) ELSE ; !( WAIT_FOR_32K )
                                        (0352)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0353)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0354) ENDIF ;(WAIT_FOR_32K)
                                        (0355) ENDIF ;(PLL_MODE)
                                        (0356) 
                                        (0357) 	;-------------------------------------------------------
                                        (0358)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0359)     ;-------------------------------------------------------
                                        (0360) 
                                        (0361)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0362) 
                                        (0363) IF (SYSCLK_SOURCE)
                                        (0364)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0365) ENDIF
                                        (0366)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0367) 
                                        (0368) 	;------------------------
                                        (0369) 	; Close CT leakage path.
                                        (0370) 	;------------------------
00A3: 62 71 05 MOV   REG[0x71],0x5      (0371) 	mov reg[ACC00CR0], 05h
00A6: 62 75 05 MOV   REG[0x75],0x5      (0372) 	mov reg[ACC01CR0], 05h
00A9: 62 79 05 MOV   REG[0x79],0x5      (0373) 	mov reg[ACC02CR0], 05h
00AC: 62 7D 05 MOV   REG[0x7D],0x5      (0374) 	mov reg[ACC03CR0], 05h
00AF: 62 D1 03 MOV   REG[0xD1],0x3      
                                        (0375) 
                                        (0376) 
                                        (0377) 
                                        (0378) IF	(TOOLCHAIN & HITECH)
                                        (0379)     ;---------------------------------------------
                                        (0380)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0381)     ;---------------------------------------------
                                        (0382) 	global		__Lstackps
                                        (0383) 	mov     a,low __Lstackps
                                        (0384) 	swap    a,sp
                                        (0385) 
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0388)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0389)     RAM_SETPAGE_CUR 0
                                        (0390)     RAM_SETPAGE_MVW 0
                                        (0391)     RAM_SETPAGE_MVR 0
                                        (0392)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0393)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0394)     ELSE
                                        (0395)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0396)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0397) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0398) ELSE
                                        (0399)     ;---------------------------------------------
                                        (0400)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0401)     ;---------------------------------------------
                                        (0402) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0403)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B2: 50 00    MOV   A,0x0              (0404)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B4: 4E       SWAP  SP,A               (0405)     swap  A, SP
00B5: 62 D3 03 MOV   REG[0xD3],0x3      
00B8: 62 D0 00 MOV   REG[0xD0],0x0      
00BB: 62 D5 00 MOV   REG[0xD5],0x0      
00BE: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0406)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0407)     RAM_SETPAGE_CUR 0
                                        (0408)     RAM_SETPAGE_MVW 0
                                        (0409)     RAM_SETPAGE_MVR 0
                                        (0410) 
                                        (0411)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C1: 71 C0    OR    F,0xC0             (0412)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0413)   ELSE
                                        (0414)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0415)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0416) ELSE
                                        (0417)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0418)     swap  SP, A
                                        (0419) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0420) ENDIF ;	TOOLCHAIN
                                        (0421) 
                                        (0422)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0423)     ;---------------------------------------------------
                                        (0424)     ; Insert your custom code below this banner
                                        (0425)     ;---------------------------------------------------
                                        (0426) 
                                        (0427)     ;---------------------------------------------------
                                        (0428)     ; Insert your custom code above this banner
                                        (0429)     ;---------------------------------------------------
                                        (0430)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0431) 
                                        (0432)     ;-------------------------
                                        (0433)     ; Load Base Configuration
                                        (0434)     ;-------------------------
                                        (0435)     ; Load global parameter settings and load the user modules in the
                                        (0436)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0437)     ; to minimize start up time; (2) We may still need to play with the
                                        (0438)     ; Sleep Timer.
                                        (0439)     ;
00C3: 7C 03 49 LCALL 0x0349             (0440)     lcall LoadConfigInit
00C6: 70 EF    AND   F,0xEF             
                                        (0441)     M8C_SetBank0
                                        (0442) 
                                        (0443)     ;-----------------------------------
                                        (0444)     ; Initialize C Run-Time Environment
                                        (0445)     ;-----------------------------------
                                        (0446) IF ( C_LANGUAGE_SUPPORT )
                                        (0447) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0448)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0449)     mov  [__r0],<__bss_start
                                        (0450) BssLoop:
                                        (0451)     cmp  [__r0],<__bss_end
                                        (0452)     jz   BssDone
                                        (0453)     mvi  [__r0],A
                                        (0454)     jmp  BssLoop
                                        (0455) BssDone:
                                        (0456)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0457)     mov  X,<__idata_start
                                        (0458)     mov  [__r0],<__data_start
                                        (0459) IDataLoop:
                                        (0460)     cmp  [__r0],<__data_end
                                        (0461)     jz   C_RTE_Done
                                        (0462)     push A
                                        (0463)     romx
                                        (0464)     mvi  [__r0],A
                                        (0465)     pop  A
                                        (0466)     inc  X
                                        (0467)     adc  A,0
                                        (0468)     jmp  IDataLoop
                                        (0469) 
                                        (0470) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0471) 
                                        (0472) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C8: 62 D0 00 MOV   REG[0xD0],0x0      (0473)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0474)                                        ; to use the Virtual Register page.
                                        (0475) 
                                        (0476)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0477)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0478)     ; text segment and may have been relocated by the Code Compressor.
                                        (0479)     ;
00CB: 50 02    MOV   A,0x2              (0480)     mov   A, >__pXIData                ; Get the address of the flash
00CD: 57 82    MOV   X,0x82             (0481)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CF: 08       PUSH  A                  (0482)     push  A
00D0: 28       ROMX                     (0483)     romx                               ; get the MSB of xidata's address
00D1: 53 01    MOV   [__r0],A           (0484)     mov   [__r0], A
00D3: 18       POP   A                  (0485)     pop   A
00D4: 75       INC   X                  (0486)     inc   X
00D5: 09 00    ADC   A,0x0              (0487)     adc   A, 0
00D7: 28       ROMX                     (0488)     romx                               ; get the LSB of xidata's address
00D8: 4B       SWAP  A,X                (0489)     swap  A, X
00D9: 51 01    MOV   A,[__r0]           (0490)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0491)                                        ;   XIData structure list in flash
00DB: 80 04    JMP   0x00E0             (0492)     jmp   .AccessStruct
                                        (0493) 
                                        (0494)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0495)     ; values of C variables. Each structure contains 3 member elements.
                                        (0496)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0497)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0498)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0499)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0500)     ; value in the second member element, an unsigned byte:
                                        (0501)     ; (1) If the value of the second element is non-zero, it represents
                                        (0502)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0503)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0504)     ; the bytes are copied to the block of RAM.
                                        (0505)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0506)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0507)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0508) 
                                        (0509) .AccessNextStructLoop:
00DD: 75       INC   X                  (0510)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0511)     adc   A, 0
00E0: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0512) .AccessStruct:                         ; Entry point for first block
                                        (0513)     ;
                                        (0514)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0515)     ;
                                        (0516)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E3: 08       PUSH  A                  (0517)     push  A
00E4: 28       ROMX                     (0518)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E5: 60 D5    MOV   REG[0xD5],A        (0519)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E7: 74       INC   A                  (0520)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E8: A0 4B    JZ    0x0134             (0521)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00EA: 18       POP   A                  (0522)     pop   A                            ; restore pXIData to [A,X]
00EB: 75       INC   X                  (0523)     inc   X                            ; pXIData++
00EC: 09 00    ADC   A,0x0              (0524)     adc   A, 0
00EE: 08       PUSH  A                  (0525)     push  A
00EF: 28       ROMX                     (0526)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00F0: 53 01    MOV   [__r0],A           (0527)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00F2: 18       POP   A                  (0528)     pop   A                            ; restore pXIData to [A,X]
00F3: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to size)
00F4: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00F6: 08       PUSH  A                  (0531)     push  A
00F7: 28       ROMX                     (0532)     romx                               ; Get the size (CPU.A <- *pXIData)
00F8: A0 1C    JZ    0x0115             (0533)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00FA: 53 00    MOV   [__r1],A           (0534)     mov   [__r1], A                    ;             else downcount in __r1
00FC: 18       POP   A                  (0535)     pop   A                            ; restore pXIData to [A,X]
                                        (0536) 
                                        (0537) .CopyNextByteLoop:
                                        (0538)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0539)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0540)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0541)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0542)     ;
00FD: 75       INC   X                  (0543)     inc   X                            ; pXIData++ (point to next data byte)
00FE: 09 00    ADC   A,0x0              (0544)     adc   A, 0
0100: 08       PUSH  A                  (0545)     push  A
0101: 28       ROMX                     (0546)     romx                               ; Get the data value (CPU.A <- *pXIData)
0102: 3F 01    MVI   [__r0],A           (0547)     mvi   [__r0], A                    ; Transfer the data to RAM
0104: 47 01 FF TST   [__r0],0xFF        (0548)     tst   [__r0], 0xff                 ; Check for page crossing
0107: B0 06    JNZ   0x010E             (0549)     jnz   .CopyLoopTail                ;   No crossing, keep going
0109: 5D D5    MOV   A,REG[0xD5]        (0550)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
010B: 74       INC   A                  (0551)     inc   A
010C: 60 D5    MOV   REG[0xD5],A        (0552)     mov   reg[ MVW_PP], A
                                        (0553) .CopyLoopTail:
010E: 18       POP   A                  (0554)     pop   A                            ; restore pXIData to [A,X]
010F: 7A 00    DEC   [__r1]             (0555)     dec   [__r1]                       ; End of this array in flash?
0111: BF EB    JNZ   0x00FD             (0556)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0113: 8F C9    JMP   0x00DD             (0557)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0558) 
                                        (0559) .ClearRAMBlockToZero:
0115: 18       POP   A                  (0560)     pop   A                            ; restore pXIData to [A,X]
0116: 75       INC   X                  (0561)     inc   X                            ; pXIData++ (point to next data byte)
0117: 09 00    ADC   A,0x0              (0562)     adc   A, 0
0119: 08       PUSH  A                  (0563)     push  A
011A: 28       ROMX                     (0564)     romx                               ; Get the run length (CPU.A <- *pXIData)
011B: 53 00    MOV   [__r1],A           (0565)     mov   [__r1], A                    ; Initialize downcounter
011D: 50 00    MOV   A,0x0              (0566)     mov   A, 0                         ; Initialize source data
                                        (0567) 
                                        (0568) .ClearRAMBlockLoop:
                                        (0569)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0570)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0571)     ;
011F: 3F 01    MVI   [__r0],A           (0572)     mvi   [__r0], A                    ; Clear a byte
0121: 47 01 FF TST   [__r0],0xFF        (0573)     tst   [__r0], 0xff                 ; Check for page crossing
0124: B0 08    JNZ   0x012D             (0574)     jnz   .ClearLoopTail               ;   No crossing, keep going
0126: 5D D5    MOV   A,REG[0xD5]        (0575)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0128: 74       INC   A                  (0576)     inc   A
0129: 60 D5    MOV   REG[0xD5],A        (0577)     mov   reg[ MVW_PP], A
012B: 50 00    MOV   A,0x0              (0578)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0579) .ClearLoopTail:
012D: 7A 00    DEC   [__r1]             (0580)     dec   [__r1]                       ; Was this the last byte?
012F: BF EF    JNZ   0x011F             (0581)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0131: 18       POP   A                  (0582)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0132: 8F AA    JMP   0x00DD             (0583)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0584) 
                                        (0585) .C_RTE_WrapUp:
0134: 18       POP   A                  (0586)     pop   A                            ; balance stack
0135: 71 10    OR    F,0x10             
0137: 70 EF    AND   F,0xEF             
                                        (0587) 
                                        (0588) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0589) 
                                        (0590) C_RTE_Done:
                                        (0591) 
                                        (0592) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0593) 
                                        (0594)     ;-------------------------------
                                        (0595)     ; Voltage Stabilization for SMP
                                        (0596)     ;-------------------------------
                                        (0597) 
                                        (0598) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0599) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0600)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0601)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0602)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0603)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0604)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0605)     M8C_SetBank1
                                        (0606)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0607)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0608)     M8C_SetBank0
                                        (0609)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0610)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0611) .WaitFor2ms:
                                        (0612)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0613)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0614) ENDIF ; SMP is operational
                                        (0615) ENDIF ; 5.0V Operation
                                        (0616) 
                                        (0617)     ;-------------------------------
                                        (0618)     ; Set Power-On Reset (POR) Level
                                        (0619)     ;-------------------------------
                                        (0620) 
                                        (0621)     ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper selection 
                                        (0622)     ; is made (in the global resources section of the device editor), a compilation error is created, disallowing
                                        (0623)     ; this selection. If the selection is valid, the POR level is then set.
                                        (0624)     ; Invalid cases checked: 
                                        (0625)     ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
                                        (0626) 
                                        (0627) 
                                        (0628) IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
                                        (0629)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
                                        (0630)  ELSE
                                        (0631)    IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
                                        (0632)    ELSE						; Otherwise, 24 MHz is selected... raise error
                                        (0633) 	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
                                        (0634)    ENDIF
                                        (0635)  ENDIF
                                        (0636) ENDIF
                                        (0637)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0638)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0639)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0640)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0641)     ;  Technical Reference Manual #001-52594 for more information.
                                        (0642) 
                                        (0643)     M8C_SetBank1
                                        (0644) 
                                        (0645) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0646)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0647)  ELSE                                       ;    No, fast mode
                                        (0648)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0649)                                             ;       no, set midpoint POR in user code, if desired
                                        (0650)   ELSE ; 24HMz                              ;
                                        (0651)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0652)   ENDIF ; 24MHz
                                        (0653)  ENDIF ; Slow Mode
                                        (0654) ENDIF ; 5.0V Operation
                                        (0655) 
                                        (0656)     M8C_SetBank0
                                        (0657) 
                                        (0658)     ;----------------------------
                                        (0659)     ; Wrap up and invoke "main"
                                        (0660)     ;----------------------------
                                        (0661) 
                                        (0662)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0663)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0664)     ;
0139: 62 E0 00 MOV   REG[0xE0],0x0      (0665)     mov  reg[INT_MSK0],0
013C: 71 10    OR    F,0x10             
                                        (0666) 
                                        (0667)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0668)     ;
                                        (0669)     M8C_SetBank1
013E: 62 E0 00 MOV   REG[0xE0],0x0      (0670)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0141: 43 E2 00 OR    REG[0xE2],0x0      (0671) 	or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
0144: 70 EF    AND   F,0xEF             
                                        (0672)     M8C_SetBank0
                                        (0673) 
                                        (0674)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0675)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0676)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0677)     ;
0146: 62 E2 00 MOV   REG[0xE2],0x0      (0678)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0679)                                    ; have been set during the boot process.
                                        (0680) IF	(TOOLCHAIN & HITECH)
                                        (0681) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0682) ELSE
                                        (0683) IF ENABLE_LJMP_TO_MAIN
                                        (0684)     ljmp  _main                    ; goto main (no return)
                                        (0685) ELSE
0149: 7C 03 AB LCALL __text_start|_main|_main(0686)     lcall _main                    ; call main
                                        (0687) .Exit:
014C: 8F FF    JMP   0x014C             (0688)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0689) ENDIF
                                        (0690) ENDIF ; TOOLCHAIN
                                        (0691) 
                                        (0692)     ;---------------------------------
                                        (0693)     ; Library Access to Global Parms
                                        (0694)     ;---------------------------------
                                        (0695)     ;
                                        (0696)  bGetPowerSetting:
                                        (0697) _bGetPowerSetting:
                                        (0698)     ; Returns value of POWER_SETTING in the A register.
                                        (0699)     ; No inputs. No Side Effects.
                                        (0700)     ;
                                        (0701) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0702)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0703) ELSE
014E: 50 10    MOV   A,0x10             (0704)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0705) ENDIF
0150: 7F       RET                      (0706)     ret
                                        (0707) 
                                        (0708) IF	(TOOLCHAIN & HITECH)
                                        (0709) ELSE
                                        (0710)     ;---------------------------------
                                        (0711)     ; Order Critical RAM & ROM AREAs
                                        (0712)     ;---------------------------------
                                        (0713)     ;  'TOP' is all that has been defined so far...
                                        (0714) 
                                        (0715)     ;  ROM AREAs for C CONST, static & global items
                                        (0716)     ;
                                        (0717)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0718)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0719) __idata_start:
                                        (0720) 
                                        (0721)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0722) __func_lit_start:
                                        (0723) 
                                        (0724) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0725)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0726)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0727)     ; relocated by the code compressor, but the text area may shrink and
                                        (0728)     ; that moves xidata around.
                                        (0729)     ;
                                        (0730) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0731) ENDIF
                                        (0732) 
                                        (0733)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0734)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0735) 
                                        (0736)     ; CODE segment for general use
                                        (0737)     ;
                                        (0738)     AREA text (ROM, REL, CON)
                                        (0739) __text_start:
                                        (0740) 
                                        (0741)     ; RAM area usage
                                        (0742)     ;
                                        (0743)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0744) __data_start:
                                        (0745) 
                                        (0746)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0747)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0748)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0749) __bss_start:
                                        (0750) ENDIF ; TOOLCHAIN
                                        (0751) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2401
0284: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_cy8c28445_led_blinky_Bank1
                                        (0006) export LoadConfigTBL_cy8c28445_led_blinky_Bank0
                                        (0007) export LoadConfigTBL_cy8c28445_led_blinky_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_cy8c28445_led_blinky_Bank0:
                                        (0010) ;  Global Register values Bank 0
                                        (0011) 	db		6ah, 00h		; ADCDataHigh register (SADC_DH)
                                        (0012) 	db		6bh, 00h		; ADCDataLow register (SADC_DL)
                                        (0013) 	db		62h, 00h		; AnalogClockSelect3 register (CLK_CR3)
                                        (0014) 	db		60h, 29h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0015) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0016) 	db		61h, 00h		; AnalogMuxBusConfig register (AMUX_CFG)
                                        (0017) 	db		fch, 00h		; AnalogMuxDACData:0 register (IDACR_D)
                                        (0018) 	db		fdh, 00h		; AnalogMuxDACData:1 register (IDACL_D)
                                        (0019) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0020) 	db		65h, 00h		; AnalogSynchronizationControl register (ASY_CR)
                                        (0021) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0022) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0023) 	db		a0h, 00h		; DecimatorDataHigh:0 register (DEC0_DH)
                                        (0024) 	db		a2h, 00h		; DecimatorDataHigh:1 register (DEC1_DH)
                                        (0025) 	db		a4h, 00h		; DecimatorDataHigh:2 register (DEC2_DH)
                                        (0026) 	db		a6h, 00h		; DecimatorDataHigh:3 register (DEC3_DH)
                                        (0027) 	db		a1h, 00h		; DecimatorDataLow:0 register (DEC0_DL)
                                        (0028) 	db		a3h, 00h		; DecimatorDataLow:1 register (DEC1_DL)
                                        (0029) 	db		a5h, 00h		; DecimatorDataLow:2 register (DEC2_DL)
                                        (0030) 	db		a7h, 00h		; DecimatorDataLow:3 register (DEC3_DL)
                                        (0031) 	db		d6h, 00h		; I2CConfig:0 register (I2C0_CFG)
                                        (0032) 	db		e8h, 00h		; Multiply0InputX register (MUL0_X)
                                        (0033) 	db		e9h, 00h		; Multiply0InputY register (MUL0_Y)
                                        (0034) 	db		a8h, 00h		; Multiply1InputX register (MUL1_X)
                                        (0035) 	db		a9h, 00h		; Multiply1InputY register (MUL1_Y)
                                        (0036) 	db		b7h, 00h		; RowDigitalInterconnectInputSelect:0 register (RDI0DSM)
                                        (0037) 	db		bfh, 00h		; RowDigitalInterconnectInputSelect:1 register (RDI1DSM)
                                        (0038) 	db		c7h, 00h		; RowDigitalInterconnectInputSelect:2 register (RDI2DSM)
                                        (0039) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0040) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0041) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0042) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0043) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0044) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0RO0)
                                        (0045) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0RO1)
                                        (0046) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0047) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0048) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0049) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0050) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0051) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1RO0)
                                        (0052) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1RO1)
                                        (0053) 	db		c0h, aah		; Row_2_InputMux register (RDI2RI)
                                        (0054) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0055) 	db		c2h, 00h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0056) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0057) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI2LT1)
                                        (0058) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2RO0)
                                        (0059) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2RO1)
                                        (0060) 	db		ffh
                                        (0061) LoadConfigTBL_cy8c28445_led_blinky_Bank1:
                                        (0062) ;  Global Register values Bank 1
                                        (0063) 	db		a8h, 00h		; ADCControl0 register (SADC_CR0)
                                        (0064) 	db		a9h, 00h		; ADCControl1 register (SADC_CR1)
                                        (0065) 	db		aah, 00h		; ADCControl2 register (ADC_CR2)
                                        (0066) 	db		abh, 00h		; ADCControl3 register (ADC_CR3TRIM)
                                        (0067) 	db		ach, 00h		; ADCControl4 register (ADC_CR4)
                                        (0068) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0069) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0070) 	db		8bh, 00h		; AnalogColumnClockDivide register (ACE_CLK_CR3)
                                        (0071) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0072) 	db		8ah, 00h		; AnalogEClockSelect1 register (ACE_CLK_CR1)
                                        (0073) 	db		89h, 00h		; AnalogEColumnClockSelect register (ACE_CLK_CR0)
                                        (0074) 	db		75h, 09h		; AnalogEColumnInputSelect register (ACE_AMX_IN)
                                        (0075) 	db		76h, 00h		; AnalogEComparatorControl0 register (ACE_CMP_CR0)
                                        (0076) 	db		77h, 00h		; AnalogEComparatorControl1 register (ACE_CMP_CR1)
                                        (0077) 	db		7ah, 33h		; AnalogELUTControl0 register (ACE_ALT_CR0)
                                        (0078) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0079) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0080) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0081) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0082) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0083) 	db		6ah, 00h		; AnalogMuxBusConfig1 register (AMUX_CFG1)
                                        (0084) 	db		afh, 00h		; AnalogMuxClock register (AMUX_CLK)
                                        (0085) 	db		7bh, 00h		; AnalogOutBufferControl register (ACE_ABF_CR0)
                                        (0086) 	db		79h, 00h		; ComparatorGlobalInEn register (ACE_CMP_GI_EN)
                                        (0087) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0088) 	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
                                        (0089) 	db		fdh, 00h		; DAC_Control_0 register (IDAC_CR0)
                                        (0090) 	db		dch, 00h		; DAC_Control_1 register (IDAC_CR1)
                                        (0091) 	db		91h, 00h		; DEC_CR0:0 register (DEC0_CR0)
                                        (0092) 	db		95h, 00h		; DEC_CR0:1 register (DEC1_CR0)
                                        (0093) 	db		99h, 00h		; DEC_CR0:2 register (DEC2_CR0)
                                        (0094) 	db		9dh, 00h		; DEC_CR0:3 register (DEC3_CR0)
                                        (0095) 	db		9ah, 00h		; DecimatorControl_5 register (DEC_CR5)
                                        (0096) 	db		92h, 00h		; DecimatorEnable:0 register (DEC_CR3)
                                        (0097) 	db		96h, 00h		; DecimatorEnable:1 register (DEC_CR4)
                                        (0098) 	db		d4h, 00h		; Decimator_Control:0 register (DEC0_CR)
                                        (0099) 	db		d5h, 00h		; Decimator_Control:1 register (DEC1_CR)
                                        (0100) 	db		d6h, 00h		; Decimator_Control:2 register (DEC2_CR)
                                        (0101) 	db		d7h, 00h		; Decimator_Control:3 register (DEC3_CR)
                                        (0102) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0103) 	db		a1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input_Control register (GDI_E_IN_CR)
                                        (0104) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0105) 	db		a3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output_Control register (GDI_E_OU_CR)
                                        (0106) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0107) 	db		a0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input_Control register (GDI_O_IN_CR)
                                        (0108) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0109) 	db		a2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output_Control register (GDI_O_OU_CR)
                                        (0110) 	db		adh, 00h		; I2CAddress:0 register (I2C0_ADDR)
                                        (0111) 	db		aeh, 00h		; I2CAddress:1 register (I2C1_ADDR)
                                        (0112) 	db		6bh, 00h		; I2CConfig:1 register (I2C1_CFG)
                                        (0113) 	db		e7h, 00h		; IDACMode register (IDACMODE)
                                        (0114) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0115) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0116) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0117) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0118) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0119) 	db		85h, 00h		; PWM_Control register (ACE_PWM_CR)
                                        (0120) 	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
                                        (0121) 	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
                                        (0122) 	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
                                        (0123) 	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                        (0124) 	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
                                        (0125) 	db		edh, 00h		; Port_5_MUXBusCtrl register (MUX_CR5)
                                        (0126) 	db		a7h, 00h		; RTClockControl register (RTCCR)
                                        (0127) 	db		a4h, 00h		; RTCurrentHour register (RTCH)
                                        (0128) 	db		a5h, 00h		; RTCurrentMinute register (RTCM)
                                        (0129) 	db		a6h, 00h		; RTCurrentSecond register (RTCS)
                                        (0130) 	db		82h, 00h		; TSCMPHigh register (SADC_TSCMPH)
                                        (0131) 	db		81h, 00h		; TSCMPLow register (SADC_TSCMPL)
                                        (0132) 	db		71h, 00h		; TSource0 register (SADC_TSCR0)
                                        (0133) 	db		72h, 00h		; TSource1 register (SADC_TSCR1)
                                        (0134) 	db		ffh
                                        (0135) AREA psoc_config(rom, rel)
                                        (0136) LoadConfigTBL_cy8c28445_led_blinky_Ordered:
                                        (0137) ;  Ordered Global Register values
                                        (0138) 	M8C_SetBank0
0286: 62 00 01 MOV   REG[0x0],0x1       (0139) 	mov	reg[00h], 01h		; Port_0_Data register (PRT0DR)
0289: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
028B: 62 00 01 MOV   REG[0x0],0x1       (0141) 	mov	reg[00h], 01h		; Port_0_DriveMode_0 register (PRT0DM0)
028E: 62 01 FF MOV   REG[0x1],0xFF      (0142) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0291: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
0293: 62 03 FE MOV   REG[0x3],0xFE      (0144) 	mov	reg[03h], feh		; Port_0_DriveMode_2 register (PRT0DM2)
0296: 62 02 00 MOV   REG[0x2],0x0       (0145) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0299: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
029B: 62 02 00 MOV   REG[0x2],0x0       (0147) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
029E: 62 03 00 MOV   REG[0x3],0x0       (0148) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02A1: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
02A3: 62 01 00 MOV   REG[0x1],0x0       (0150) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02A6: 62 04 00 MOV   REG[0x4],0x0       (0151) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
02A9: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
02AB: 62 04 01 MOV   REG[0x4],0x1       (0153) 	mov	reg[04h], 01h		; Port_1_DriveMode_0 register (PRT1DM0)
02AE: 62 05 FE MOV   REG[0x5],0xFE      (0154) 	mov	reg[05h], feh		; Port_1_DriveMode_1 register (PRT1DM1)
02B1: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
02B3: 62 07 FE MOV   REG[0x7],0xFE      (0156) 	mov	reg[07h], feh		; Port_1_DriveMode_2 register (PRT1DM2)
02B6: 62 06 00 MOV   REG[0x6],0x0       (0157) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
02B9: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
02BB: 62 06 00 MOV   REG[0x6],0x0       (0159) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02BE: 62 07 00 MOV   REG[0x7],0x0       (0160) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
02C1: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
02C3: 62 05 00 MOV   REG[0x5],0x0       (0162) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
02C6: 62 08 00 MOV   REG[0x8],0x0       (0163) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02C9: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
02CB: 62 08 00 MOV   REG[0x8],0x0       (0165) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
02CE: 62 09 FF MOV   REG[0x9],0xFF      (0166) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
02D1: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
02D3: 62 0B FF MOV   REG[0xB],0xFF      (0168) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
02D6: 62 0A 00 MOV   REG[0xA],0x0       (0169) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
02D9: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
02DB: 62 0A 00 MOV   REG[0xA],0x0       (0171) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02DE: 62 0B 00 MOV   REG[0xB],0x0       (0172) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02E1: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
02E3: 62 09 00 MOV   REG[0x9],0x0       (0174) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02E6: 62 0C 00 MOV   REG[0xC],0x0       (0175) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02E9: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
02EB: 62 0C 00 MOV   REG[0xC],0x0       (0177) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02EE: 62 0D 00 MOV   REG[0xD],0x0       (0178) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02F1: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
02F3: 62 0F 00 MOV   REG[0xF],0x0       (0180) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02F6: 62 0E 00 MOV   REG[0xE],0x0       (0181) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02F9: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
02FB: 62 0E 00 MOV   REG[0xE],0x0       (0183) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02FE: 62 0F 00 MOV   REG[0xF],0x0       (0184) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0301: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
0303: 62 0D 00 MOV   REG[0xD],0x0       (0186) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0306: 62 10 00 MOV   REG[0x10],0x0      (0187) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0309: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
030B: 62 10 00 MOV   REG[0x10],0x0      (0189) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
030E: 62 11 00 MOV   REG[0x11],0x0      (0190) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0311: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
0313: 62 13 00 MOV   REG[0x13],0x0      (0192) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0316: 62 12 00 MOV   REG[0x12],0x0      (0193) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0319: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
031B: 62 12 00 MOV   REG[0x12],0x0      (0195) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
031E: 62 13 00 MOV   REG[0x13],0x0      (0196) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0321: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
0323: 62 11 00 MOV   REG[0x11],0x0      (0198) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0326: 62 14 00 MOV   REG[0x14],0x0      (0199) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0329: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
032B: 62 14 00 MOV   REG[0x14],0x0      (0201) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
032E: 62 15 00 MOV   REG[0x15],0x0      (0202) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0331: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
0333: 62 17 00 MOV   REG[0x17],0x0      (0204) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0336: 62 16 00 MOV   REG[0x16],0x0      (0205) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0339: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
033B: 62 16 00 MOV   REG[0x16],0x0      (0207) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
033E: 62 17 00 MOV   REG[0x17],0x0      (0208) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0341: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
0343: 62 15 00 MOV   REG[0x15],0x0      (0210) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0346: 70 EF    AND   F,0xEF             
                                        (0211) 	M8C_SetBank0
0348: 7F       RET                      (0212) 	ret
                                        (0213) 
                                        (0214) 
                                        (0215) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2401
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_cy8c28445_led_blinky
                                        (0026) export _LoadConfig_cy8c28445_led_blinky
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
0349: 7C 03 50 LCALL 0x0350             (0058) 	lcall	LoadConfig_cy8c28445_led_blinky
034C: 7C 02 84 LCALL 0x0284             (0059) 	lcall	LoadConfigTBL_cy8c28445_led_blinky_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
034F: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration cy8c28445_led_blinky
                                        (0067) ;
                                        (0068) ;    Load configuration registers for cy8c28445_led_blinky.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_cy8c28445_led_blinky:
                                        (0085)  LoadConfig_cy8c28445_led_blinky:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0350: 10       PUSH  X                  (0088) 	push	x
0351: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0353: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0355: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0356: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_cy8c28445_led_blinky_Bank0
0358: 57 90    MOV   X,0x90             (0094)     mov     X, <LoadConfigTBL_cy8c28445_led_blinky_Bank0
035A: 7C 03 6B LCALL 0x036B             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
035D: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
035F: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0360: 50 01    MOV   A,0x1              (0100)     mov     A, >LoadConfigTBL_cy8c28445_led_blinky_Bank1
0362: 57 F3    MOV   X,0xF3             (0101)     mov     X, <LoadConfigTBL_cy8c28445_led_blinky_Bank1
0364: 7C 03 6B LCALL 0x036B             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0367: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0369: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
036A: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
036B: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
036D: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
036E: 08       PUSH  A                  (0132)     push    A
036F: 4F       MOV   X,SP               (0133)     mov     X, SP
0370: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0373: D0 04    JNC   0x0378             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0375: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0378: 18       POP   A                  (0138)     pop     A
0379: 20       POP   X                  (0139)     pop     X
037A: 70 EF    AND   F,0xEF             
037C: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
037F: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
0380: 08       PUSH  A                  (0145)     push    A
0381: 28       ROMX                     (0146)     romx                            ; Load register address from table
0382: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0384: A0 1F    JZ    0x03A4             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0386: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0387: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
038A: A0 03    JZ    0x038E             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
038C: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
038E: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
0390: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
0391: 20       POP   X                  (0156)     pop     X
0392: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0393: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0395: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0396: 08       PUSH  A                  (0160)     push    A
0397: 28       ROMX                     (0161)     romx                            ; load config data from the table
0398: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0399: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
039B: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
039D: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
039E: 20       POP   X                  (0166)     pop     X
039F: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
03A0: 09 00    ADC   A,0x0              (0168)     adc     A, 0
03A2: 8F D7    JMP   0x037A             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
03A4: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
03A6: 70 3F    AND   F,0x3F             
03A8: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
03AA: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: C:\Users\wbz\Perforce\PERFOR~1\WBZ_WB~1\software\products\psoc1\software\Docs\SOFTWA~1\PD51_SP3\ONLINE~1\02-LED~1\CY8C28~1\CY8C28~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) 
(0009) void main(void)
(0010) {
__text_start|_main|_main:
    03AB: 80 15    JMP   0x03C1
(0011)     while(1)
(0012)     {
(0013)     	if (PRT0DR & 0x01) //Checks the state of the button. If the button is pressed then it will execute.
    03AD: 5D 00    MOV   A,REG[0x0]
    03AF: 62 D0 00 MOV   REG[0xD0],0x0
    03B2: 53 01    MOV   [__r0],A
    03B4: 47 01 01 TST   [__r0],0x1
    03B7: A0 06    JZ    0x03BE
(0014)     	{
(0015)     		PRT1DR &= ~0x01; //Turns the LED On.
    03B9: 41 04 FE AND   REG[0x4],0xFE
(0016)     	}
    03BC: 80 04    JMP   0x03C1
(0017)     	else
(0018)     	{
(0019)     		PRT1DR |=  0x01; //Turns the LED Off.
    03BE: 43 04 01 OR    REG[0x4],0x1
(0020)     	}
(0021)     }
    03C1: 8F EB    JMP   0x03AD
(0022) }
    03C3: 8F FF    JMP   0x03C3
